
import java.awt.Font;
import java.awt.Point;
import java.awt.font.FontRenderContext;
import java.awt.font.TextLayout;
import java.awt.geom.AffineTransform;

import javax.swing.JLabel;
import javax.swing.JPanel;

SoUrCe RooT Tree_View "../features/Tree_View/HitComponentLabel.jak";

/**
 * Panel fuer die Hit-Anzeige.
 * 
 * Zum Zwecke einer unterschiedlichen Textformatierung wurde diese Klasse eingefuehrt, um Text in verschiedenen 
 * Fonts auf einem JPanel darstellen zu koennen. Eine Instanz dieser Klasse erzeugt ein JLabel auf dem der uebergeben 
 * Text mit der gegebenen Font dargestellt wird.
 * 
 * @author Mr. Pink
 */
public final class HitComponentLabel extends JLabel{
	//private static final long serialVersionUID = 1L;

	/**
	 * Text setzen.
	 * 
	 * Diese Methode setzt den Text auf ein HitComponentLabel-Objekt. Der Punkt, der von dieser Methode zurueckgegeben 
	 * wird, ist die Groesse des Objektes, das benoetigt wird um den Text vollstaendig anzuzeigen. 
	 * 
	 * @param superObj  Das JPanel auf dem das Objekt erzeugt werden soll.
	 * @param xy        Die Position des Objektes.
	 * @param text      Der Text des Objektes.
	 * @param font      Der Font den der Text benutzen soll.
	 * 
	 * @return          siehe Oben.
	 */
	public Point setText( JPanel superObj, Point xy, String text, Font font){
		this.setFont(font);
		this.setText(text);
		
		 FontRenderContext frc = new FontRenderContext(new AffineTransform(),true,false);
		 TextLayout tl = new TextLayout(text,font,frc);
		superObj.add(this).setBounds((int)xy.getX(),(int) xy.getY(),(int)(tl.getBounds().getWidth()+10),font.getSize()+5);
		return new Point((int)(tl.getBounds().getWidth()+10),(int)tl.getBounds().getHeight());
	}
}