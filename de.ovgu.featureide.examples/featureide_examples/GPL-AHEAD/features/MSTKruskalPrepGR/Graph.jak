
import java.lang.Integer;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Comparator;

// *************************************************************************
   
public refines class Graph 
{
        
    LinkedList edges = null;
    boolean edgesNotBuilt = true;

    public EdgeIter getEdges( )
    {
	  if ( edgesNotBuilt )
        {
              edgesNotBuilt = false;
		  edges = new LinkedList();

	        int k1=0,k2=0, sizeAV=0;
	        for ( VertexIter vxiter = getVertices( ); vxiter.hasNext( ); )
      	  {
			Vertex v = vxiter.next( );
	            sizeAV = v.adjacentVertices.size();
      	      for ( k2=0; k2<sizeAV; k2++ ) {
            	    edges.add( new  Edge( v,
                  	               ( Vertex ) ( v.adjacentVertices ).get( k2 ),
	                 ( ( Integer ) ( v.weightsList ).get( k2 ) ).intValue() ) );
      	      } // of k2
	        } // of k1
        }  
        return new EdgeIter() {
                private Iterator iter = edges.iterator();
                public EdgeIfc next() { return (EdgeIfc)iter.next(); }
                public boolean hasNext() { return iter.hasNext(); }
            };
    }
    public void sortEdges(Comparator c) {
        Collections.sort(edges, c);
    }

}
