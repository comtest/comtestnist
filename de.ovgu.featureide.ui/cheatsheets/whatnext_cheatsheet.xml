<?xml version="1.0" encoding="UTF-8" ?> 
<cheatsheet title="First FeatureIDE Project" >
	<intro>
		<description>
You have succesfully created and implemented your first FeatureIDE project. Now you can learn to use one of the other composers by restarting the tutorial and choosing a different composition tool. If you want to take a look at further examples. You can also take a look into this overview of composition tools.


</description>
</intro>
<item
 	title="Composer Overview">
 	<description>
 	You have already learned how to create a FeatureIDE project that uses the AHEAD composer. In FeatureIDE you can also use FeatureC++, FeatureHouse, AspectJ, DeltaJ, Munge, and Antenna. The following section gives a short introduction to each of them.
 	</description>
 	<subitem>
 	<description>
 	<b>AHEAD</b><br/><br/>
 	You have already used the AHEAD composer in the FeatureIDE tutorial. It supports composition of Jak files. Jak extends Java with keywords for Feature-Oriented-Programming.<br/> <br/>
 	Keywords: <br/>
	refines: used to specify refinements of an existing class. <br/>
	super: used to call a refined method . 	<br/><br/>
	Example:<br/>
	public refines class Main {<br/>
	public void print() {<br/>
		Super().print();<br/>
		System.out.print(" world!");<br/>
	}<br/>
	}<br/>
 	</description>
 	</subitem>
	<subitem>
 	<description>
 	<b>FeatureC++</b><br/><br/>
 	FeatureC++ is a C++ language extension to support Feature-Oriented Programming (FOP). The extension of C++ is similar to the Java extension (Jak) by AHEAD.<br/> <br/>  
 	Keywords: <br/>
	refines: used to specify refinements of an existing class. <br/>
	super: used to call a refined method . 	<br/><br/>
	Example:<br/>
	refines class Main {<br/>
	public:<br/>
	int run() { <br/>
		int res = super::run(); <br/>
		if (res!=0)<br/>
			return res;<br/>
		printf(" World!");<br/>
		return 0;<br/>
	}<br/>
	};<br/>
 	</description>
 	</subitem>
 	
 	 	<subitem>
 	<description>
 	<b>FeatureHouse</b><br/><br/>
 	FeatureHouse is language-independent in that software artifacts written in various languages can be composed, e.g., source code, test cases, models, documentation, makefiles.
 	Currently, FeatureHouse provides support for the composition of software artifacts written in Java, C#, C, Haskell, JavaCC, Alloy and UML.<br/> <br/>  
 	Keywords: <br/>
	original(): used to call a refined method.<br/><br/>
	Example: (Java)<br/>
	public class Main {<br/>
	protected void print() {<br/>
	original();<br/>
	System.out.print(" World!");<br/>
	}<br/>
	}<br/>
 	</description>
 	</subitem>
 	 	<subitem>
 	<description>
 	<b>AspectJ</b><br/><br/>
 	AspectJ is a aspect-oriented extension of Java. In FeatureIDE each feature corresponds to one aspect. 	<br/><br/>
 	Example:<br/>
 
 	public aspect Wonderful {<br/>
	after(): call(void Main.print()) {<br/>
		System.out.print(" wonderful");<br/>
	}<br/>
	}<br/>
 	</description>
 	</subitem>
 	 	<subitem>
 	<description>
 	<b>DeltaJ</b><br/><br/>
 	DeltaJ is a Java-like language supporting Delta-Oriented-Programming. 
 	Delta-Oriented-Programming is similar to Feature-Oriented-Programming 
 	but each project contains of one core module and a set of delta modules. 
	A core module is a simple collection of classes, while a delta module is a set of operations that allow to add a new class and modify or remove classes declared in other delta or core modules.<br/><br/>
 	Keywords: <br/>
 	modifies: used to specify a refined class or method<br/>
 	original(): used to call a refined method<br/>
 	delta: used to specify a delta module<br/>
 	core: used to specify a core module<br/>
 	after: used to specify module dependencies (the current module depends on the list of modules following the after keyword)<br/><br/>
 	Example:<br/>
 	delta Wonderful after Beautiful when Wonderful{<br/>
	modifies class Main{<br/>
		modifies void print() {<br/>
			original();<br/>
			new SystemOutWrapper().print(" wonderful");<br/>
		}<br/>
	}<br/>
	}<br/>	
	NOTE: a core module includes a lines specifying features and configurations. In FeatureIDE these lines are modified automatically.<br/>
 		
 	</description>
 	</subitem>
 	 	<subitem>
 	<description>
 	<b>Munge</b><br/><br/>
 	Munge is a purposely-simple Java preprocessor. When using Munge you can use Munge-style Java comments to specify the mapping between parts of code and features.<br/><br/>
 	Example:<br/>
 	public class Main {<br/>
	public static void main(String[] args){<br/>
		/*if[Hello]*/<br/>
		System.out.print("Hello");<br/>
		/*end[Hello]*/<br/>
		/*if[Beautiful]*/	<br/>
		System.out.print(" beautiful");<br/>
		/*end[Beautiful]*/<br/>
		/*if[Wonderful]*/	<br/>
		System.out.print(" wonderful");	<br/>
		/*end[Wonderful]*/<br/>
		/*if[World]*/		<br/>
		System.out.print(" world!");<br/>
		/*end[World]*/<br/>
	}<br/>
}<br/>
 	</description>
 	</subitem>
 	 	<subitem>
 	<description>
 	<b>Antenna</b><br/><br/>
 	Antenna is a Java preprocessor. You can use Antenna-style Java comments to specify the mapping between parts of code and features.<br/><br/>
 	Example:<br/>
 			//#if Hello<br/>
		System.out.print("Hello");<br/>
		//#endif<br/>
		//#if Beautiful<br/>
		System.out.print(" beautiful");<br/>
		//#endif<br/>
		//#if Wonderful<br/>
		System.out.print(" wonderful");	<br/>
		//#endif<br/>
		//#if World<br/>
		System.out.print(" world!");<br/>
		//#endif<br/>
	}<br/>
 
 	</description>
 	</subitem>
 	</item>	
<item
       title="Checkout our examples">
    <description>
      You can access our examples using &quot;New&gt;Examples...&quot; in package explorer. We provide an HelloWorld example for every FeatureIDE extension, which may help to create projects in other languages and with other composition mechanisms.
    </description>
 </item>
 
 
</cheatsheet>
