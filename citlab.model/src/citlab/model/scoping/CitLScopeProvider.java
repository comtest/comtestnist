/*******************************************************************************
 * Copyright (c) 2013 University of Bergamo - Italy
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *   Paolo Vavassori - initial API and implementation
 *   Angelo Gargantini - utils and architecture
 ******************************************************************************/
/*
 * generated by Xtext
 */
package citlab.model.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;




import citlab.model.citL.EnumAssign;
import citlab.model.citL.Element;
import citlab.model.citL.EnumSeed;
import citlab.model.citL.Enumerative;
import citlab.model.citL.EnumerativeType;
import citlab.model.citL.ModelUtils;
import citlab.model.citL.NamedType;




/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class CitLScopeProvider extends AbstractDeclarativeScopeProvider {

	/**
	 * Scope_ enum seed_right: This method returns the elements of the
	 * enumerative referenced in the left side of the EnumSeed rule .
	 * 
	 * @param ctx
	 *            the context : EnumSeed
	 * @param ref
	 *            the ref
	 * @return the i scope
	 */
	IScope scope_EnumSeed_right(EnumSeed ctx, EReference ref) {
		if (ctx.getLeft() == null)
			return IScope.NULLSCOPE;
		if (ctx.getLeft() == null)
			return IScope.NULLSCOPE;

		return new SimpleScope(IScope.NULLSCOPE, getrightTElementsFQN(ctx.getLeft()));
//		if (ctx.getLeft().getNamedType() != null)
//			return new SimpleScope(IScope.NULLSCOPE, getrightTElements(ctx
//					.getLeft().getNamedType()));
//		else
//			assert (ctx.getLeft().getAtype() != null);
//		return new SimpleScope(IScope.NULLSCOPE, getrightTElements(ctx
//				.getLeft().getAtype()));

	}

	/**
	 * Scope_ assign_right : This method returns the elements of the enumerative
	 * referenced in the left side of the EnumAssign rule.
	 * 
	 * @param ctx
	 *            the context : EnumAssign
	 * @param ref
	 *            the ref
	 * @return the i scope
	 */
	IScope scope_EnumAssign_right(EnumAssign ctx, EReference ref) {
		if (ctx.getLeft() == null)
			return IScope.NULLSCOPE;

		return new SimpleScope(IScope.NULLSCOPE, getrightTElementsFQN(ctx.getLeft()));
	}

//	private Iterable<IEObjectDescription> getrightTElements(EnumerativeType left) {
//		List<IEObjectDescription> result = new ArrayList<IEObjectDescription>();
//		for (Element e : left.getElements()) {
//			result.add(new EObjectDescription(
//					QualifiedName.create(e.getName()), e, null));
//		}
//		return result;
//
//	}

	private Iterable<IEObjectDescription> getrightTElementsFQN(Enumerative ctx) {
		EnumerativeType type = ModelUtils.getEnumerativeType(ctx);
		assert type != null : ctx;
		List<IEObjectDescription> result = new ArrayList<IEObjectDescription>();
		if (type instanceof NamedType) {
			NamedType nt = (NamedType) type;
			for (Element e : nt.getElements()) {
				result.add(new EObjectDescription(QualifiedName.create(
						nt.getName(), e.getName()), e, null));
			}
		} else {
			for (Element e : type.getElements()) {
				result.add(new EObjectDescription(QualifiedName.create(ctx
						.getName(), e.getName()), e, null));
			}
		}
		return result;

	}
}
