/*
* generated by Xtext
*/
grammar InternalCitL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package citlab.model.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package citlab.model.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import citlab.model.services.CitLGrammarAccess;

}

@parser::members {

 	private CitLGrammarAccess grammarAccess;
 	
    public InternalCitLParser(TokenStream input, CitLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "CitModel";	
   	}
   	
   	@Override
   	protected CitLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCitModel
entryRuleCitModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCitModelRule()); }
	 iv_ruleCitModel=ruleCitModel 
	 { $current=$iv_ruleCitModel.current; } 
	 EOF 
;

// Rule CitModel
ruleCitModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCitModelAccess().getCitModelAction_0(),
            $current);
    }
)	otherlv_1='Model' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCitModelAccess().getModelKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getCitModelAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCitModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='Definitions:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCitModelAccess().getDefinitionsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCitModelAccess().getDefinitionsConstantParserRuleCall_3_1_0()); 
	    }
		lv_definitions_4_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCitModelRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_4_0, 
        		"Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCitModelAccess().getEndKeyword_3_2());
    }
)?(	otherlv_6='Types:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCitModelAccess().getTypesKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCitModelAccess().getTypesNamedTypeParserRuleCall_4_1_0()); 
	    }
		lv_Types_7_0=ruleNamedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCitModelRule());
	        }
       		add(
       			$current, 
       			"Types",
        		lv_Types_7_0, 
        		"NamedType");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_8='end' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCitModelAccess().getEndKeyword_4_2());
    }
)?	otherlv_9='Parameters:' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCitModelAccess().getParametersKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCitModelAccess().getParametersParameterParserRuleCall_6_0()); 
	    }
		lv_parameters_10_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCitModelRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_10_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_11='end' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getCitModelAccess().getEndKeyword_7());
    }
(	otherlv_12='Constraints:' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getCitModelAccess().getConstraintsKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCitModelAccess().getConstraintsRuleParserRuleCall_8_1_0()); 
	    }
		lv_constraints_13_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCitModelRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_13_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_14='end' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getCitModelAccess().getEndKeyword_8_2());
    }
)?(	otherlv_15='Seeds:' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getCitModelAccess().getSeedsKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCitModelAccess().getSeedsSeedParserRuleCall_9_1_0()); 
	    }
		lv_seeds_16_0=ruleSeed		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCitModelRule());
	        }
       		add(
       			$current, 
       			"seeds",
        		lv_seeds_16_0, 
        		"Seed");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_17='end' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getCitModelAccess().getEndKeyword_9_2());
    }
)?(	otherlv_18='TestGoals:' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getCitModelAccess().getTestGoalsKeyword_10_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCitModelAccess().getTestGoalsRuleParserRuleCall_10_1_0()); 
	    }
		lv_testGoals_19_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCitModelRule());
	        }
       		add(
       			$current, 
       			"testGoals",
        		lv_testGoals_19_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_20='end' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getCitModelAccess().getEndKeyword_10_2());
    }
)?)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getConstantAccess().getConstantNumberParserRuleCall()); 
    }
    this_ConstantNumber_0=ruleConstantNumber
    { 
        $current = $this_ConstantNumber_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleConstantNumber
entryRuleConstantNumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantNumberRule()); }
	 iv_ruleConstantNumber=ruleConstantNumber 
	 { $current=$iv_ruleConstantNumber.current; } 
	 EOF 
;

// Rule ConstantNumber
ruleConstantNumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Number' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantNumberAccess().getNumberKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantNumberAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantNumberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantNumberAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_value_3_0=RULE_INT
		{
			newLeafNode(lv_value_3_0, grammarAccess.getConstantNumberAccess().getValueINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantNumberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"INT");
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantNumberAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getEnumerativeParserRuleCall_0()); 
    }
    this_Enumerative_0=ruleEnumerative
    { 
        $current = $this_Enumerative_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getBooleanParserRuleCall_1()); 
    }
    this_Boolean_1=ruleBoolean
    { 
        $current = $this_Boolean_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getNumericalParserRuleCall_2()); 
    }
    this_Numerical_2=ruleNumerical
    { 
        $current = $this_Numerical_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleNumericalEx
entryRuleNumericalEx returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalExRule()); }
	 iv_ruleNumericalEx=ruleNumericalEx 
	 { $current=$iv_ruleNumericalEx.current; } 
	 EOF 
;

// Rule NumericalEx
ruleNumericalEx returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericalExAccess().getNumericalParserRuleCall_0()); 
    }
    this_Numerical_0=ruleNumerical
    { 
        $current = $this_Numerical_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericalExAccess().getConstantNumberParserRuleCall_1()); 
    }
    this_ConstantNumber_1=ruleConstantNumber
    { 
        $current = $this_ConstantNumber_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNumerical
entryRuleNumerical returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalRule()); }
	 iv_ruleNumerical=ruleNumerical 
	 { $current=$iv_ruleNumerical.current; } 
	 EOF 
;

// Rule Numerical
ruleNumerical returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericalAccess().getNumbersParserRuleCall_0()); 
    }
    this_Numbers_0=ruleNumbers
    { 
        $current = $this_Numbers_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericalAccess().getRangeParserRuleCall_1()); 
    }
    this_Range_1=ruleRange
    { 
        $current = $this_Range_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleNamedType
entryRuleNamedType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedTypeRule()); }
	 iv_ruleNamedType=ruleNamedType 
	 { $current=$iv_ruleNamedType.current; } 
	 EOF 
;

// Rule NamedType
ruleNamedType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='EnumerativeType' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNamedTypeAccess().getEnumerativeTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNamedTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNamedTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedTypeAccess().getElementsElementParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedTypeRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNamedTypeAccess().getRightCurlyBracketKeyword_4());
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNamedTypeAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleAnonymousType
entryRuleAnonymousType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnonymousTypeRule()); }
	 iv_ruleAnonymousType=ruleAnonymousType 
	 { $current=$iv_ruleAnonymousType.current; } 
	 EOF 
;

// Rule AnonymousType
ruleAnonymousType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnonymousTypeAccess().getElementsElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnonymousTypeRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleEnumerative
entryRuleEnumerative returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerativeRule()); }
	 iv_ruleEnumerative=ruleEnumerative 
	 { $current=$iv_ruleEnumerative.current; } 
	 EOF 
;

// Rule Enumerative
ruleEnumerative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Enumerative' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumerativeAccess().getEnumerativeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEnumerativeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerativeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumerativeAccess().getColonKeyword_2_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerativeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getEnumerativeAccess().getNamedTypeNamedTypeCrossReference_2_0_1_0()); 
	}

)
))
    |(	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumerativeAccess().getLeftCurlyBracketKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerativeAccess().getAtypeAnonymousTypeParserRuleCall_2_1_1_0()); 
	    }
		lv_atype_5_0=ruleAnonymousType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerativeRule());
	        }
       		set(
       			$current, 
       			"atype",
        		lv_atype_5_0, 
        		"AnonymousType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumerativeAccess().getRightCurlyBracketKeyword_2_1_2());
    }
))	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEnumerativeAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getElementAccess().getNameElementIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleelementID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"elementID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current; } 
	 EOF 
;

// Rule Boolean
ruleBoolean returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Boolean' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBooleanAccess().getBooleanKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBooleanAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleNumbers
entryRuleNumbers returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumbersRule()); }
	 iv_ruleNumbers=ruleNumbers 
	 { $current=$iv_ruleNumbers.current; } 
	 EOF 
;

// Rule Numbers
ruleNumbers returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Numbers' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNumbersAccess().getNumbersKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNumbersAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumbersRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumbersAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumbersAccess().getValuesPossiblySignedNumberParserRuleCall_3_0()); 
	    }
		lv_values_3_0=rulePossiblySignedNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumbersRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"PossiblySignedNumber");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNumbersAccess().getRightCurlyBracketKeyword_4());
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNumbersAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Range' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRangeAccess().getRangeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRangeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRangeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRangeAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getBeginPossiblySignedNumberParserRuleCall_3_0()); 
	    }
		lv_begin_3_0=rulePossiblySignedNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"begin",
        		lv_begin_3_0, 
        		"PossiblySignedNumber");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='..' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRangeAccess().getFullStopFullStopKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getEndPossiblySignedNumberParserRuleCall_5_0()); 
	    }
		lv_end_5_0=rulePossiblySignedNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_5_0, 
        		"PossiblySignedNumber");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRangeAccess().getRightSquareBracketKeyword_6());
    }
(	otherlv_7='step' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRangeAccess().getStepKeyword_7_0());
    }
(
(
		lv_step_8_0=RULE_INT
		{
			newLeafNode(lv_step_8_0, grammarAccess.getRangeAccess().getStepINTTerminalRuleCall_7_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRangeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"step",
        		lv_step_8_0, 
        		"INT");
	    }

)
))?	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRangeAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getNumberSignKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getRuleAccess().getOrExpressionParserRuleCall_1()); 
    }
    this_OrExpression_1=ruleOrExpression
    { 
        $current = $this_OrExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='#' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getNumberSignKeyword_2());
    }
)
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
ruleOrOperators
)
)(
(
ruleAndExpression
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getOpOrOperatorsEnumRuleCall_1_0_1_0()); 
	    }
		lv_op_2_0=ruleOrOperators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"OrOperators");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getImpliesExpressionParserRuleCall_0()); 
    }
    this_ImpliesExpression_0=ruleImpliesExpression
    { 
        $current = $this_ImpliesExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
ruleAndOperators
)
)(
(
ruleImpliesExpression
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getOpAndOperatorsEnumRuleCall_1_0_1_0()); 
	    }
		lv_op_2_0=ruleAndOperators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"AndOperators");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightImpliesExpressionParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleImpliesExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ImpliesExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpliesExpressionRule()); }
	 iv_ruleImpliesExpression=ruleImpliesExpression 
	 { $current=$iv_ruleImpliesExpression.current; } 
	 EOF 
;

// Rule ImpliesExpression
ruleImpliesExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImpliesExpressionAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExpressionAccess().getOpImpliesOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleImpliesOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"ImpliesOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExpressionAccess().getRightPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getNotExpressionParserRuleCall_0()); 
    }
    this_NotExpression_0=ruleNotExpression
    { 
        $current = $this_NotExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getOrExpressionParserRuleCall_1_1()); 
    }
    this_OrExpression_2=ruleOrExpression
    { 
        $current = $this_OrExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicPredicateParserRuleCall_2()); 
    }
    this_AtomicPredicate_4=ruleAtomicPredicate
    { 
        $current = $this_AtomicPredicate_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_0_0());
    }

    |	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotExpressionAccess().getNotKeyword_0_1());
    }
)
    { 
        newCompositeNode(grammarAccess.getNotExpressionAccess().getPrimaryParserRuleCall_1()); 
    }
    this_Primary_2=rulePrimary
    { 
        $current = $this_Primary_2.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNotExpressionAccess().getNotExpressionPredicateAction_2(),
            $current);
    }
))
;





// Entry rule entryRuleAtomicPredicate
entryRuleAtomicPredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicPredicateRule()); }
	 iv_ruleAtomicPredicate=ruleAtomicPredicate 
	 { $current=$iv_ruleAtomicPredicate.current; } 
	 EOF 
;

// Rule AtomicPredicate
ruleAtomicPredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	RULE_ID

)
)=>
    { 
        newCompositeNode(grammarAccess.getAtomicPredicateAccess().getEnumAssignParserRuleCall_0()); 
    }
    this_EnumAssign_0=ruleEnumAssign
    { 
        $current = $this_EnumAssign_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
	RULE_ID

)
)=>
    { 
        newCompositeNode(grammarAccess.getAtomicPredicateAccess().getBoolAssignParserRuleCall_1()); 
    }
    this_BoolAssign_1=ruleBoolAssign
    { 
        $current = $this_BoolAssign_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getAtomicPredicateAccess().getRelationalExpressionParserRuleCall_2()); 
    }
    this_RelationalExpression_2=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBoolAssign
entryRuleBoolAssign returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolAssignRule()); }
	 iv_ruleBoolAssign=ruleBoolAssign 
	 { $current=$iv_ruleBoolAssign.current; } 
	 EOF 
;

// Rule BoolAssign
ruleBoolAssign returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	RULE_ID

)
)=>
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolAssignRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getBoolAssignAccess().getLeftBooleanCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBoolAssignAccess().getOpAssignmentOperatorsEnumRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleAssignmentOperators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoolAssignRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"AssignmentOperators");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBoolAssignAccess().getRightBooleanConstEnumRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleBooleanConst		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoolAssignRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"BooleanConst");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEnumAssign
entryRuleEnumAssign returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumAssignRule()); }
	 iv_ruleEnumAssign=ruleEnumAssign 
	 { $current=$iv_ruleEnumAssign.current; } 
	 EOF 
;

// Rule EnumAssign
ruleEnumAssign returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	RULE_ID

)
)=>
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumAssignRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEnumAssignAccess().getLeftEnumerativeCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAssignAccess().getOpAssignmentOperatorsEnumRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleAssignmentOperators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumAssignRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"AssignmentOperators");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumAssignRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getEnumAssignAccess().getRightElementCrossReference_2_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
	RULE_ID

)
)(
(
(
ruleAssignmentOperators
    |ruleRelationalOperators
)

)
)(
(
rulePlusMinus
)
)))=>((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getRelationalExpressionAccess().getLeftNumericalCrossReference_0_0_0()); 
	}

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpAssignmentOperatorsEnumRuleCall_0_1_0_0()); 
	    }
		lv_op_1_1=ruleAssignmentOperators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_1, 
        		"AssignmentOperators");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorsEnumRuleCall_0_1_0_1()); 
	    }
		lv_op_1_2=ruleRelationalOperators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_2, 
        		"RelationalOperators");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightPlusMinusParserRuleCall_0_2_0()); 
	    }
		lv_right_2_0=rulePlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"PlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePlusMinus
entryRulePlusMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusMinusRule()); }
	 iv_rulePlusMinus=rulePlusMinus 
	 { $current=$iv_rulePlusMinus.current; } 
	 EOF 
;

// Rule PlusMinus
rulePlusMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlusMinusAccess().getModMultDivParserRuleCall_0()); 
    }
    this_ModMultDiv_0=ruleModMultDiv
    { 
        $current = $this_ModMultDiv_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusMinusAccess().getPlusMinusLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusMinusAccess().getOpPlusMinusOperatorsEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=rulePlusMinusOperators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusMinusRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"PlusMinusOperators");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusMinusAccess().getRightModMultDivParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleModMultDiv		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusMinusRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ModMultDiv");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleModMultDiv
entryRuleModMultDiv returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModMultDivRule()); }
	 iv_ruleModMultDiv=ruleModMultDiv 
	 { $current=$iv_ruleModMultDiv.current; } 
	 EOF 
;

// Rule ModMultDiv
ruleModMultDiv returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModMultDivAccess().getNumericParserRuleCall_0()); 
    }
    this_Numeric_0=ruleNumeric
    { 
        $current = $this_Numeric_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getModMultDivAccess().getModMultDivLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModMultDivAccess().getOpModMultDivOperatorsEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleModMultDivOperators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModMultDivRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"ModMultDivOperators");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModMultDivAccess().getRightNumericParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleNumeric		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModMultDivRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Numeric");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumeric
entryRuleNumeric returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericRule()); }
	 iv_ruleNumeric=ruleNumeric 
	 { $current=$iv_ruleNumeric.current; } 
	 EOF 
;

// Rule Numeric
ruleNumeric returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericAccess().getNumberLiteralParserRuleCall_0()); 
    }
    this_NumberLiteral_0=ruleNumberLiteral
    { 
        $current = $this_NumberLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNumericAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getNumericAccess().getPlusMinusParserRuleCall_1_1()); 
    }
    this_PlusMinus_2=rulePlusMinus
    { 
        $current = $this_PlusMinus_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNumericAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	 iv_ruleNumberLiteral=ruleNumberLiteral 
	 { $current=$iv_ruleNumberLiteral.current; } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNumberLiteralAccess().getNumberPossiblySignedNumberParserRuleCall_0_0()); 
	    }
		lv_number_0_0=rulePossiblySignedNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberLiteralRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_0_0, 
        		"PossiblySignedNumber");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberLiteralRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getNumberLiteralAccess().getNumericalNumericalExCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleSeed
entryRuleSeed returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSeedRule()); }
	 iv_ruleSeed=ruleSeed 
	 { $current=$iv_ruleSeed.current; } 
	 EOF 
;

// Rule Seed
ruleSeed returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSeedAccess().getNumberSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSeedAccess().getAssigmentSeedListAseedParserRuleCall_1_0()); 
	    }
		lv_AssigmentSeedList_1_0=ruleAseed		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSeedRule());
	        }
       		add(
       			$current, 
       			"AssigmentSeedList",
        		lv_AssigmentSeedList_1_0, 
        		"Aseed");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSeedAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSeedAccess().getAssigmentSeedListAseedParserRuleCall_2_1_0()); 
	    }
		lv_AssigmentSeedList_3_0=ruleAseed		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSeedRule());
	        }
       		add(
       			$current, 
       			"AssigmentSeedList",
        		lv_AssigmentSeedList_3_0, 
        		"Aseed");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='#' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSeedAccess().getNumberSignKeyword_3());
    }
)
;





// Entry rule entryRuleAseed
entryRuleAseed returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAseedRule()); }
	 iv_ruleAseed=ruleAseed 
	 { $current=$iv_ruleAseed.current; } 
	 EOF 
;

// Rule Aseed
ruleAseed returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	RULE_ID

)
)=>
    { 
        newCompositeNode(grammarAccess.getAseedAccess().getEnumSeedParserRuleCall_0()); 
    }
    this_EnumSeed_0=ruleEnumSeed
    { 
        $current = $this_EnumSeed_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
	RULE_ID

)
)=>
    { 
        newCompositeNode(grammarAccess.getAseedAccess().getBoolAssignSeedParserRuleCall_1()); 
    }
    this_BoolAssignSeed_1=ruleBoolAssignSeed
    { 
        $current = $this_BoolAssignSeed_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
	RULE_ID

)
)=>
    { 
        newCompositeNode(grammarAccess.getAseedAccess().getNumericalSeedParserRuleCall_2()); 
    }
    this_NumericalSeed_2=ruleNumericalSeed
    { 
        $current = $this_NumericalSeed_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleSeedNumberLiteral
entryRuleSeedNumberLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSeedNumberLiteralRule()); }
	 iv_ruleSeedNumberLiteral=ruleSeedNumberLiteral 
	 { $current=$iv_ruleSeedNumberLiteral.current; } 
	 EOF 
;

// Rule SeedNumberLiteral
ruleSeedNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSeedNumberLiteralAccess().getNumberPossiblySignedNumberParserRuleCall_0_0()); 
	    }
		lv_number_0_0=rulePossiblySignedNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSeedNumberLiteralRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_0_0, 
        		"PossiblySignedNumber");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSeedNumberLiteralRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSeedNumberLiteralAccess().getConstantConstantNumberCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleEnumSeed
entryRuleEnumSeed returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumSeedRule()); }
	 iv_ruleEnumSeed=ruleEnumSeed 
	 { $current=$iv_ruleEnumSeed.current; } 
	 EOF 
;

// Rule EnumSeed
ruleEnumSeed returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	RULE_ID

)
)=>
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumSeedRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEnumSeedAccess().getLeftEnumerativeCrossReference_0_0()); 
	}

)
)(
(
		lv_op_1_0=	'=' 
    {
        newLeafNode(lv_op_1_0, grammarAccess.getEnumSeedAccess().getOpEqualsSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumSeedRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_0, "=");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumSeedRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getEnumSeedAccess().getRightElementCrossReference_2_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNumericalSeed
entryRuleNumericalSeed returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalSeedRule()); }
	 iv_ruleNumericalSeed=ruleNumericalSeed 
	 { $current=$iv_ruleNumericalSeed.current; } 
	 EOF 
;

// Rule NumericalSeed
ruleNumericalSeed returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	RULE_ID

)
)=>
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumericalSeedRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getNumericalSeedAccess().getLeftNumericalCrossReference_0_0()); 
	}

)
)(
(
		lv_op_1_0=	'=' 
    {
        newLeafNode(lv_op_1_0, grammarAccess.getNumericalSeedAccess().getOpEqualsSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumericalSeedRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_0, "=");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalSeedAccess().getRightSeedNumberLiteralParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleSeedNumberLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalSeedRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"SeedNumberLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBoolAssignSeed
entryRuleBoolAssignSeed returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolAssignSeedRule()); }
	 iv_ruleBoolAssignSeed=ruleBoolAssignSeed 
	 { $current=$iv_ruleBoolAssignSeed.current; } 
	 EOF 
;

// Rule BoolAssignSeed
ruleBoolAssignSeed returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	RULE_ID

)
)=>
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolAssignSeedRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getBoolAssignSeedAccess().getLeftBooleanCrossReference_0_0()); 
	}

)
)(
(
		lv_op_1_0=	'=' 
    {
        newLeafNode(lv_op_1_0, grammarAccess.getBoolAssignSeedAccess().getOpEqualsSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolAssignSeedRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_0, "=");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBoolAssignSeedAccess().getRightBooleanConstEnumRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleBooleanConst		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoolAssignSeedRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"BooleanConst");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleelementID
entryRuleelementID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementIDRule()); } 
	 iv_ruleelementID=ruleelementID 
	 { $current=$iv_ruleelementID.current.getText(); }  
	 EOF 
;

// Rule elementID
ruleelementID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getElementIDAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_NUMID_1=RULE_NUMID    {
		$current.merge(this_NUMID_1);
    }

    { 
    newLeafNode(this_NUMID_1, grammarAccess.getElementIDAccess().getNUMIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getFQNAccess().getElementIDParserRuleCall_2()); 
    }
    this_elementID_2=ruleelementID    {
		$current.merge(this_elementID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePossiblySignedNumber
entryRulePossiblySignedNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPossiblySignedNumberRule()); } 
	 iv_rulePossiblySignedNumber=rulePossiblySignedNumber 
	 { $current=$iv_rulePossiblySignedNumber.current.getText(); }  
	 EOF 
;

// Rule PossiblySignedNumber
rulePossiblySignedNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPossiblySignedNumberAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getPossiblySignedNumberAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule RelationalOperators
ruleRelationalOperators returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='>' 
	{
        $current = grammarAccess.getRelationalOperatorsAccess().getGTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorsAccess().getGTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getRelationalOperatorsAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorsAccess().getLTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getRelationalOperatorsAccess().getGEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorsAccess().getGEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getRelationalOperatorsAccess().getLEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorsAccess().getLEEnumLiteralDeclaration_3()); 
    }
));



// Rule AssignmentOperators
ruleAssignmentOperators returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getAssignmentOperatorsAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAssignmentOperatorsAccess().getEQEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getAssignmentOperatorsAccess().getNEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAssignmentOperatorsAccess().getNEEnumLiteralDeclaration_1()); 
    }
));



// Rule AndOperators
ruleAndOperators returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='&&' 
	{
        $current = grammarAccess.getAndOperatorsAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAndOperatorsAccess().getAndEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='and' 
	{
        $current = grammarAccess.getAndOperatorsAccess().getAndmiEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAndOperatorsAccess().getAndmiEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='AND' 
	{
        $current = grammarAccess.getAndOperatorsAccess().getANDmaEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAndOperatorsAccess().getANDmaEnumLiteralDeclaration_2()); 
    }
));



// Rule OrOperators
ruleOrOperators returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='||' 
	{
        $current = grammarAccess.getOrOperatorsAccess().getOrEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOrOperatorsAccess().getOrEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='or' 
	{
        $current = grammarAccess.getOrOperatorsAccess().getOrmiEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOrOperatorsAccess().getOrmiEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='OR' 
	{
        $current = grammarAccess.getOrOperatorsAccess().getORmaEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOrOperatorsAccess().getORmaEnumLiteralDeclaration_2()); 
    }
));



// Rule PlusMinusOperators
rulePlusMinusOperators returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getPlusMinusOperatorsAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPlusMinusOperatorsAccess().getPlusEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getPlusMinusOperatorsAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPlusMinusOperatorsAccess().getMinusEnumLiteralDeclaration_1()); 
    }
));



// Rule ModMultDivOperators
ruleModMultDivOperators returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='%' 
	{
        $current = grammarAccess.getModMultDivOperatorsAccess().getModEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getModMultDivOperatorsAccess().getModEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='*' 
	{
        $current = grammarAccess.getModMultDivOperatorsAccess().getMultEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getModMultDivOperatorsAccess().getMultEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='/' 
	{
        $current = grammarAccess.getModMultDivOperatorsAccess().getDivEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getModMultDivOperatorsAccess().getDivEnumLiteralDeclaration_2()); 
    }
));



// Rule ImpliesOperator
ruleImpliesOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=>' 
	{
        $current = grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=>' 
	{
        $current = grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_1()); 
    }
));



// Rule BooleanConst
ruleBooleanConst returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='false' 
	{
        $current = grammarAccess.getBooleanConstAccess().getFalseEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBooleanConstAccess().getFalseEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='true' 
	{
        $current = grammarAccess.getBooleanConstAccess().getTrueEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBooleanConstAccess().getTrueEnumLiteralDeclaration_1()); 
    }
));



RULE_NUMID : (('0'..'9')+ RULE_ID|'"' RULE_INT '"');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


