/*******************************************************************************
 * Copyright (c) 2013 University of Bergamo - Italy
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *   Paolo Vavassori - initial API and implementation
 *   Angelo Gargantini - utils and architecture
 ******************************************************************************/
/*
 * generated by Xtext
 */
package citlab.model.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import citlab.model.citL.CitModel;
import citlab.model.citL.Element;
import citlab.model.citL.Enumerative;
import citlab.model.citL.EnumerativeType;
import citlab.model.citL.ModelUtils;
import citlab.model.citL.NamedType;
import citlab.model.citL.Parameter;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class CitLProposalProvider extends AbstractCitLProposalProvider {
/*	@Override
	public void complete_INT(EObject model, RuleCall ruleCall, ContentAssistContext contentAssistContext, ICompletionProposalAcceptor acceptor) {
		if (contentAssistContext.getLastCompleteNode() != null) {
			String name = contentAssistContext.getLastCompleteNode().getText();
			if (name.equals("==") || name.equals("=") || name.equals("!=")
					|| name.equals("<=") || name.equals("<")
					|| name.equals(">=") || name.equals(">"))
				return;
			else{
			super.complete_INT(model, ruleCall, contentAssistContext, acceptor)	;
			}
		
	}};
	@Override
	public void complete_BooleanConst(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		booleanConstProposal(acceptor, model, context);
	};

	@Override
	public void completeKeyword(Keyword keyword,
			ContentAssistContext contentAssistContext,
			ICompletionProposalAcceptor acceptor) {
		if (contentAssistContext.getLastCompleteNode() != null) {
			String name = contentAssistContext.getLastCompleteNode().getText();
			if (name.equals("==") || name.equals("=") || name.equals("!=")
					|| name.equals("<=") || name.equals("<")
					|| name.equals(">=") || name.equals(">"))
				return;
			else
				super.completeKeyword(keyword, contentAssistContext, acceptor);
		}
	}

	@Override
	public void completeSeedNumberLiteral_Constant(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
	}

	@Override
	public void completeSeedNumberLiteral_Number(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
	}

	@Override
	public void complete_SeedNumberLiteral(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (context.getLastCompleteNode() != null
				&& context.getLastCompleteNode().getParent() != null) {
			String name = (context.getLastCompleteNode().getParent().getText()
					.replaceAll("\\s", "").replaceAll("=", ""));
			for (Parameter p : ((CitModel) context.getRootModel())
					.getParameters()) {

				if (p.getName().equals(name) && p instanceof Numerical) {
				
					for (Constant c : ((CitModel) context.getRootModel())
							.getDefinitions()) {
						if (c instanceof ConstantNumber) {
							ConstantNumber cn = (ConstantNumber) c;
							acceptor.accept(createCompletionProposal(
									cn.getName(), context));
							acceptor.accept(createCompletionProposal(
									"1", context));
							return;
						}

					}
				}
			}

		}
	}

	

	private void numberliteralExproposal(Assignment assignment,ICompletionProposalAcceptor acceptor,
			EObject model, ContentAssistContext context) {

		if (context.getLastCompleteNode() != null
				&& context.getLastCompleteNode().getParent().getParent() != null) {
			
			String name = (context.getLastCompleteNode().getParent().getParent().getText()
					.replaceAll("\\s", "").replaceAll("=", "").replaceAll("!", "")
					.replaceAll(">", "").replaceAll("<", ""));
			
			for (Parameter p : ((CitModel) context.getRootModel())
					.getParameters()) {
				if (p.getName().equals(name) && p instanceof Numerical) {
					
					for (Constant c : ((CitModel) context.getRootModel())
							.getDefinitions()) {
						if (c instanceof ConstantNumber) {
							ConstantNumber cn = (ConstantNumber) c;
							acceptor.accept(createCompletionProposal(
									cn.getName(), context));
						}

					}
					for (Parameter n : ((CitModel) context.getRootModel())
							.getParameters()) {
						if (n instanceof Numerical) {
							acceptor.accept(createCompletionProposal(
									n.getName(), context));
						}
					}
					acceptor.accept(createCompletionProposal(
							"1", context));
					acceptor.accept(createCompletionProposal(
							"(", context));
				}
			}
		}

	}

	@Override
	public void completeNumberLiteral_Numerical(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {

		if (context.getLastCompleteNode() != null) {
			String name = context.getLastCompleteNode().getText();
			if (name.equals("==") || name.equals("=") || name.equals("!=")
					|| name.equals("<=") || name.equals("<")
					|| name.equals(">=") || name.equals(">")) {
				numberliteralExproposal(assignment,acceptor, model, context);
			} else
				super.completeNumberLiteral_Numerical(model, assignment,
						context, acceptor);
			   
		}
	}

	

	private void booleanConstProposal(ICompletionProposalAcceptor acceptor,
			EObject model, ContentAssistContext context) {
		if (context.getLastCompleteNode() != null
				&& context.getLastCompleteNode().getParent().getParent() != null) {
			String name = (context.getLastCompleteNode().getParent().getText()
					.replaceAll("\\s", "").replaceAll("=", "").replaceAll("!", "")
					.replaceAll(">", "").replaceAll("<", ""));
			for (Parameter p : ((CitModel) context.getRootModel())
					.getParameters()) {
				if (p.getName().equals(name) && p instanceof Boolean) {
					acceptor.accept(createCompletionProposal("true", context));
					acceptor.accept(createCompletionProposal("false", context));
				}

			}
		}
	}

	*/
	@Override
	public void completeEnumAssign_Right(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		elementProposal(acceptor, model, context);
	}

	@Override
	public void completeEnumSeed_Right(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		elementProposal(acceptor, model, context);
	}

	private void elementProposal(ICompletionProposalAcceptor acceptor,
			EObject model, ContentAssistContext context) {
		if (context.getLastCompleteNode() != null
				&& context.getLastCompleteNode().getParent() != null) {
			String name = (context.getLastCompleteNode().getParent().getText()
					.replaceAll("\\s", "").replaceAll("=", "").replaceAll("!", "")
					.replaceAll(">", "").replaceAll("<", ""));
			for (Parameter p : ((CitModel) context.getRootModel())
					.getParameters()) {
				if (p.getName().equals(name) && p instanceof Enumerative) {
					Enumerative en = (Enumerative) p;
					EnumerativeType type = ModelUtils.getEnumerativeType(en);
					if (type instanceof NamedType)
						name = ((NamedType) type).getName();
					for (Element e : type.getElements())
						acceptor.accept(createCompletionProposal(
								name + "." + e.getName(), context));
				}

			}
		}
	}

}
