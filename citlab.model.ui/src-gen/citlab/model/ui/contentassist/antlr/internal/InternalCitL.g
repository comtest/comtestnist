/*
* generated by Xtext
*/
grammar InternalCitL;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package citlab.model.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package citlab.model.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import citlab.model.services.CitLGrammarAccess;

}

@parser::members {
 
 	private CitLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CitLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCitModel
entryRuleCitModel 
:
{ before(grammarAccess.getCitModelRule()); }
	 ruleCitModel
{ after(grammarAccess.getCitModelRule()); } 
	 EOF 
;

// Rule CitModel
ruleCitModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCitModelAccess().getGroup()); }
(rule__CitModel__Group__0)
{ after(grammarAccess.getCitModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getConstantNumberParserRuleCall()); }
	ruleConstantNumber
{ after(grammarAccess.getConstantAccess().getConstantNumberParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantNumber
entryRuleConstantNumber 
:
{ before(grammarAccess.getConstantNumberRule()); }
	 ruleConstantNumber
{ after(grammarAccess.getConstantNumberRule()); } 
	 EOF 
;

// Rule ConstantNumber
ruleConstantNumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantNumberAccess().getGroup()); }
(rule__ConstantNumber__Group__0)
{ after(grammarAccess.getConstantNumberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getAlternatives()); }
(rule__Parameter__Alternatives)
{ after(grammarAccess.getParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleNumericalEx
entryRuleNumericalEx 
:
{ before(grammarAccess.getNumericalExRule()); }
	 ruleNumericalEx
{ after(grammarAccess.getNumericalExRule()); } 
	 EOF 
;

// Rule NumericalEx
ruleNumericalEx
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalExAccess().getAlternatives()); }
(rule__NumericalEx__Alternatives)
{ after(grammarAccess.getNumericalExAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumerical
entryRuleNumerical 
:
{ before(grammarAccess.getNumericalRule()); }
	 ruleNumerical
{ after(grammarAccess.getNumericalRule()); } 
	 EOF 
;

// Rule Numerical
ruleNumerical
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalAccess().getAlternatives()); }
(rule__Numerical__Alternatives)
{ after(grammarAccess.getNumericalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleNamedType
entryRuleNamedType 
:
{ before(grammarAccess.getNamedTypeRule()); }
	 ruleNamedType
{ after(grammarAccess.getNamedTypeRule()); } 
	 EOF 
;

// Rule NamedType
ruleNamedType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedTypeAccess().getGroup()); }
(rule__NamedType__Group__0)
{ after(grammarAccess.getNamedTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnonymousType
entryRuleAnonymousType 
:
{ before(grammarAccess.getAnonymousTypeRule()); }
	 ruleAnonymousType
{ after(grammarAccess.getAnonymousTypeRule()); } 
	 EOF 
;

// Rule AnonymousType
ruleAnonymousType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getAnonymousTypeAccess().getElementsAssignment()); }
(rule__AnonymousType__ElementsAssignment)
{ after(grammarAccess.getAnonymousTypeAccess().getElementsAssignment()); }
)
(
{ before(grammarAccess.getAnonymousTypeAccess().getElementsAssignment()); }
(rule__AnonymousType__ElementsAssignment)*
{ after(grammarAccess.getAnonymousTypeAccess().getElementsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerative
entryRuleEnumerative 
:
{ before(grammarAccess.getEnumerativeRule()); }
	 ruleEnumerative
{ after(grammarAccess.getEnumerativeRule()); } 
	 EOF 
;

// Rule Enumerative
ruleEnumerative
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerativeAccess().getGroup()); }
(rule__Enumerative__Group__0)
{ after(grammarAccess.getEnumerativeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getNameAssignment()); }
(rule__Element__NameAssignment)
{ after(grammarAccess.getElementAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolean
entryRuleBoolean 
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanAccess().getGroup()); }
(rule__Boolean__Group__0)
{ after(grammarAccess.getBooleanAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumbers
entryRuleNumbers 
:
{ before(grammarAccess.getNumbersRule()); }
	 ruleNumbers
{ after(grammarAccess.getNumbersRule()); } 
	 EOF 
;

// Rule Numbers
ruleNumbers
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumbersAccess().getGroup()); }
(rule__Numbers__Group__0)
{ after(grammarAccess.getNumbersAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRange
entryRuleRange 
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeAccess().getGroup()); }
(rule__Range__Group__0)
{ after(grammarAccess.getRangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression 
:
{ before(grammarAccess.getImpliesExpressionRule()); }
	 ruleImpliesExpression
{ after(grammarAccess.getImpliesExpressionRule()); } 
	 EOF 
;

// Rule ImpliesExpression
ruleImpliesExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImpliesExpressionAccess().getGroup()); }
(rule__ImpliesExpression__Group__0)
{ after(grammarAccess.getImpliesExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotExpression
entryRuleNotExpression 
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotExpressionAccess().getGroup()); }
(rule__NotExpression__Group__0)
{ after(grammarAccess.getNotExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicPredicate
entryRuleAtomicPredicate 
:
{ before(grammarAccess.getAtomicPredicateRule()); }
	 ruleAtomicPredicate
{ after(grammarAccess.getAtomicPredicateRule()); } 
	 EOF 
;

// Rule AtomicPredicate
ruleAtomicPredicate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicPredicateAccess().getAlternatives()); }
(rule__AtomicPredicate__Alternatives)
{ after(grammarAccess.getAtomicPredicateAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolAssign
entryRuleBoolAssign 
:
{ before(grammarAccess.getBoolAssignRule()); }
	 ruleBoolAssign
{ after(grammarAccess.getBoolAssignRule()); } 
	 EOF 
;

// Rule BoolAssign
ruleBoolAssign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolAssignAccess().getGroup()); }
(rule__BoolAssign__Group__0)
{ after(grammarAccess.getBoolAssignAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumAssign
entryRuleEnumAssign 
:
{ before(grammarAccess.getEnumAssignRule()); }
	 ruleEnumAssign
{ after(grammarAccess.getEnumAssignRule()); } 
	 EOF 
;

// Rule EnumAssign
ruleEnumAssign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumAssignAccess().getGroup()); }
(rule__EnumAssign__Group__0)
{ after(grammarAccess.getEnumAssignAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlusMinus
entryRulePlusMinus 
:
{ before(grammarAccess.getPlusMinusRule()); }
	 rulePlusMinus
{ after(grammarAccess.getPlusMinusRule()); } 
	 EOF 
;

// Rule PlusMinus
rulePlusMinus
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlusMinusAccess().getGroup()); }
(rule__PlusMinus__Group__0)
{ after(grammarAccess.getPlusMinusAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModMultDiv
entryRuleModMultDiv 
:
{ before(grammarAccess.getModMultDivRule()); }
	 ruleModMultDiv
{ after(grammarAccess.getModMultDivRule()); } 
	 EOF 
;

// Rule ModMultDiv
ruleModMultDiv
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModMultDivAccess().getGroup()); }
(rule__ModMultDiv__Group__0)
{ after(grammarAccess.getModMultDivAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumeric
entryRuleNumeric 
:
{ before(grammarAccess.getNumericRule()); }
	 ruleNumeric
{ after(grammarAccess.getNumericRule()); } 
	 EOF 
;

// Rule Numeric
ruleNumeric
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericAccess().getAlternatives()); }
(rule__Numeric__Alternatives)
{ after(grammarAccess.getNumericAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
(rule__NumberLiteral__Alternatives)
{ after(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSeed
entryRuleSeed 
:
{ before(grammarAccess.getSeedRule()); }
	 ruleSeed
{ after(grammarAccess.getSeedRule()); } 
	 EOF 
;

// Rule Seed
ruleSeed
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSeedAccess().getGroup()); }
(rule__Seed__Group__0)
{ after(grammarAccess.getSeedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAseed
entryRuleAseed 
:
{ before(grammarAccess.getAseedRule()); }
	 ruleAseed
{ after(grammarAccess.getAseedRule()); } 
	 EOF 
;

// Rule Aseed
ruleAseed
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAseedAccess().getAlternatives()); }
(rule__Aseed__Alternatives)
{ after(grammarAccess.getAseedAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSeedNumberLiteral
entryRuleSeedNumberLiteral 
:
{ before(grammarAccess.getSeedNumberLiteralRule()); }
	 ruleSeedNumberLiteral
{ after(grammarAccess.getSeedNumberLiteralRule()); } 
	 EOF 
;

// Rule SeedNumberLiteral
ruleSeedNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSeedNumberLiteralAccess().getAlternatives()); }
(rule__SeedNumberLiteral__Alternatives)
{ after(grammarAccess.getSeedNumberLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumSeed
entryRuleEnumSeed 
:
{ before(grammarAccess.getEnumSeedRule()); }
	 ruleEnumSeed
{ after(grammarAccess.getEnumSeedRule()); } 
	 EOF 
;

// Rule EnumSeed
ruleEnumSeed
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumSeedAccess().getGroup()); }
(rule__EnumSeed__Group__0)
{ after(grammarAccess.getEnumSeedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalSeed
entryRuleNumericalSeed 
:
{ before(grammarAccess.getNumericalSeedRule()); }
	 ruleNumericalSeed
{ after(grammarAccess.getNumericalSeedRule()); } 
	 EOF 
;

// Rule NumericalSeed
ruleNumericalSeed
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalSeedAccess().getGroup()); }
(rule__NumericalSeed__Group__0)
{ after(grammarAccess.getNumericalSeedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolAssignSeed
entryRuleBoolAssignSeed 
:
{ before(grammarAccess.getBoolAssignSeedRule()); }
	 ruleBoolAssignSeed
{ after(grammarAccess.getBoolAssignSeedRule()); } 
	 EOF 
;

// Rule BoolAssignSeed
ruleBoolAssignSeed
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolAssignSeedAccess().getGroup()); }
(rule__BoolAssignSeed__Group__0)
{ after(grammarAccess.getBoolAssignSeedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelementID
entryRuleelementID 
:
{ before(grammarAccess.getElementIDRule()); }
	 ruleelementID
{ after(grammarAccess.getElementIDRule()); } 
	 EOF 
;

// Rule elementID
ruleelementID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementIDAccess().getAlternatives()); }
(rule__ElementID__Alternatives)
{ after(grammarAccess.getElementIDAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFQN
entryRuleFQN 
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFQNAccess().getGroup()); }
(rule__FQN__Group__0)
{ after(grammarAccess.getFQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePossiblySignedNumber
entryRulePossiblySignedNumber 
:
{ before(grammarAccess.getPossiblySignedNumberRule()); }
	 rulePossiblySignedNumber
{ after(grammarAccess.getPossiblySignedNumberRule()); } 
	 EOF 
;

// Rule PossiblySignedNumber
rulePossiblySignedNumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPossiblySignedNumberAccess().getGroup()); }
(rule__PossiblySignedNumber__Group__0)
{ after(grammarAccess.getPossiblySignedNumberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule RelationalOperators
ruleRelationalOperators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorsAccess().getAlternatives()); }
(rule__RelationalOperators__Alternatives)
{ after(grammarAccess.getRelationalOperatorsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AssignmentOperators
ruleAssignmentOperators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorsAccess().getAlternatives()); }
(rule__AssignmentOperators__Alternatives)
{ after(grammarAccess.getAssignmentOperatorsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AndOperators
ruleAndOperators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperatorsAccess().getAlternatives()); }
(rule__AndOperators__Alternatives)
{ after(grammarAccess.getAndOperatorsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule OrOperators
ruleOrOperators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperatorsAccess().getAlternatives()); }
(rule__OrOperators__Alternatives)
{ after(grammarAccess.getOrOperatorsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PlusMinusOperators
rulePlusMinusOperators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusOperatorsAccess().getAlternatives()); }
(rule__PlusMinusOperators__Alternatives)
{ after(grammarAccess.getPlusMinusOperatorsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ModMultDivOperators
ruleModMultDivOperators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModMultDivOperatorsAccess().getAlternatives()); }
(rule__ModMultDivOperators__Alternatives)
{ after(grammarAccess.getModMultDivOperatorsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ImpliesOperator
ruleImpliesOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesOperatorAccess().getAlternatives()); }
(rule__ImpliesOperator__Alternatives)
{ after(grammarAccess.getImpliesOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BooleanConst
ruleBooleanConst
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConstAccess().getAlternatives()); }
(rule__BooleanConst__Alternatives)
{ after(grammarAccess.getBooleanConstAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Parameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getEnumerativeParserRuleCall_0()); }
	ruleEnumerative
{ after(grammarAccess.getParameterAccess().getEnumerativeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getBooleanParserRuleCall_1()); }
	ruleBoolean
{ after(grammarAccess.getParameterAccess().getBooleanParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getNumericalParserRuleCall_2()); }
	ruleNumerical
{ after(grammarAccess.getParameterAccess().getNumericalParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalEx__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalExAccess().getNumericalParserRuleCall_0()); }
	ruleNumerical
{ after(grammarAccess.getNumericalExAccess().getNumericalParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericalExAccess().getConstantNumberParserRuleCall_1()); }
	ruleConstantNumber
{ after(grammarAccess.getNumericalExAccess().getConstantNumberParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Numerical__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAccess().getNumbersParserRuleCall_0()); }
	ruleNumbers
{ after(grammarAccess.getNumericalAccess().getNumbersParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericalAccess().getRangeParserRuleCall_1()); }
	ruleRange
{ after(grammarAccess.getNumericalAccess().getRangeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerative__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getGroup_2_0()); }
(rule__Enumerative__Group_2_0__0)
{ after(grammarAccess.getEnumerativeAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getEnumerativeAccess().getGroup_2_1()); }
(rule__Enumerative__Group_2_1__0)
{ after(grammarAccess.getEnumerativeAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getNotExpressionParserRuleCall_0()); }
	ruleNotExpression
{ after(grammarAccess.getPrimaryAccess().getNotExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
(rule__Primary__Group_1__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getAtomicPredicateParserRuleCall_2()); }
	ruleAtomicPredicate
{ after(grammarAccess.getPrimaryAccess().getAtomicPredicateParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_0_0()); }

	'!' 

{ after(grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getNotExpressionAccess().getNotKeyword_0_1()); }

	'not' 

{ after(grammarAccess.getNotExpressionAccess().getNotKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicPredicate__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicPredicateAccess().getEnumAssignParserRuleCall_0()); }
(	ruleEnumAssign)
{ after(grammarAccess.getAtomicPredicateAccess().getEnumAssignParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicPredicateAccess().getBoolAssignParserRuleCall_1()); }
(	ruleBoolAssign)
{ after(grammarAccess.getAtomicPredicateAccess().getBoolAssignParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicPredicateAccess().getRelationalExpressionParserRuleCall_2()); }
	ruleRelationalExpression
{ after(grammarAccess.getAtomicPredicateAccess().getRelationalExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAlternatives_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignmentOperatorsEnumRuleCall_0_1_0_0()); }
	ruleAssignmentOperators
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignmentOperatorsEnumRuleCall_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorsEnumRuleCall_0_1_0_1()); }
	ruleRelationalOperators
{ after(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorsEnumRuleCall_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericAccess().getNumberLiteralParserRuleCall_0()); }
	ruleNumberLiteral
{ after(grammarAccess.getNumericAccess().getNumberLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericAccess().getGroup_1()); }
(rule__Numeric__Group_1__0)
{ after(grammarAccess.getNumericAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getNumberAssignment_0()); }
(rule__NumberLiteral__NumberAssignment_0)
{ after(grammarAccess.getNumberLiteralAccess().getNumberAssignment_0()); }
)

    |(
{ before(grammarAccess.getNumberLiteralAccess().getNumericalAssignment_1()); }
(rule__NumberLiteral__NumericalAssignment_1)
{ after(grammarAccess.getNumberLiteralAccess().getNumericalAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aseed__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAseedAccess().getEnumSeedParserRuleCall_0()); }
(	ruleEnumSeed)
{ after(grammarAccess.getAseedAccess().getEnumSeedParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAseedAccess().getBoolAssignSeedParserRuleCall_1()); }
(	ruleBoolAssignSeed)
{ after(grammarAccess.getAseedAccess().getBoolAssignSeedParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAseedAccess().getNumericalSeedParserRuleCall_2()); }
(	ruleNumericalSeed)
{ after(grammarAccess.getAseedAccess().getNumericalSeedParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SeedNumberLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeedNumberLiteralAccess().getNumberAssignment_0()); }
(rule__SeedNumberLiteral__NumberAssignment_0)
{ after(grammarAccess.getSeedNumberLiteralAccess().getNumberAssignment_0()); }
)

    |(
{ before(grammarAccess.getSeedNumberLiteralAccess().getConstantAssignment_1()); }
(rule__SeedNumberLiteral__ConstantAssignment_1)
{ after(grammarAccess.getSeedNumberLiteralAccess().getConstantAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementID__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getElementIDAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementIDAccess().getNUMIDTerminalRuleCall_1()); }
	RULE_NUMID
{ after(grammarAccess.getElementIDAccess().getNUMIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperators__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorsAccess().getGTEnumLiteralDeclaration_0()); }
(	'>' 
)
{ after(grammarAccess.getRelationalOperatorsAccess().getGTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorsAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getRelationalOperatorsAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorsAccess().getGEEnumLiteralDeclaration_2()); }
(	'>=' 
)
{ after(grammarAccess.getRelationalOperatorsAccess().getGEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorsAccess().getLEEnumLiteralDeclaration_3()); }
(	'<=' 
)
{ after(grammarAccess.getRelationalOperatorsAccess().getLEEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperators__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorsAccess().getEQEnumLiteralDeclaration_0()); }
(	'==' 
)
{ after(grammarAccess.getAssignmentOperatorsAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAssignmentOperatorsAccess().getNEEnumLiteralDeclaration_1()); }
(	'!=' 
)
{ after(grammarAccess.getAssignmentOperatorsAccess().getNEEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperators__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperatorsAccess().getAndEnumLiteralDeclaration_0()); }
(	'&&' 
)
{ after(grammarAccess.getAndOperatorsAccess().getAndEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAndOperatorsAccess().getAndmiEnumLiteralDeclaration_1()); }
(	'and' 
)
{ after(grammarAccess.getAndOperatorsAccess().getAndmiEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAndOperatorsAccess().getANDmaEnumLiteralDeclaration_2()); }
(	'AND' 
)
{ after(grammarAccess.getAndOperatorsAccess().getANDmaEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperators__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperatorsAccess().getOrEnumLiteralDeclaration_0()); }
(	'||' 
)
{ after(grammarAccess.getOrOperatorsAccess().getOrEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOrOperatorsAccess().getOrmiEnumLiteralDeclaration_1()); }
(	'or' 
)
{ after(grammarAccess.getOrOperatorsAccess().getOrmiEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOrOperatorsAccess().getORmaEnumLiteralDeclaration_2()); }
(	'OR' 
)
{ after(grammarAccess.getOrOperatorsAccess().getORmaEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOperators__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusOperatorsAccess().getPlusEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getPlusMinusOperatorsAccess().getPlusEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPlusMinusOperatorsAccess().getMinusEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getPlusMinusOperatorsAccess().getMinusEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDivOperators__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModMultDivOperatorsAccess().getModEnumLiteralDeclaration_0()); }
(	'%' 
)
{ after(grammarAccess.getModMultDivOperatorsAccess().getModEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getModMultDivOperatorsAccess().getMultEnumLiteralDeclaration_1()); }
(	'*' 
)
{ after(grammarAccess.getModMultDivOperatorsAccess().getMultEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getModMultDivOperatorsAccess().getDivEnumLiteralDeclaration_2()); }
(	'/' 
)
{ after(grammarAccess.getModMultDivOperatorsAccess().getDivEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_0()); }
(	'=>' 
)
{ after(grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_1()); }
(	'<=>' 
)
{ after(grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConst__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConstAccess().getFalseEnumLiteralDeclaration_0()); }
(	'false' 
)
{ after(grammarAccess.getBooleanConstAccess().getFalseEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBooleanConstAccess().getTrueEnumLiteralDeclaration_1()); }
(	'true' 
)
{ after(grammarAccess.getBooleanConstAccess().getTrueEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__CitModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group__0__Impl
	rule__CitModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getCitModelAction_0()); }
(

)
{ after(grammarAccess.getCitModelAccess().getCitModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group__1__Impl
	rule__CitModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getModelKeyword_1()); }

	'Model' 

{ after(grammarAccess.getCitModelAccess().getModelKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group__2__Impl
	rule__CitModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getNameAssignment_2()); }
(rule__CitModel__NameAssignment_2)
{ after(grammarAccess.getCitModelAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group__3__Impl
	rule__CitModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getGroup_3()); }
(rule__CitModel__Group_3__0)?
{ after(grammarAccess.getCitModelAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group__4__Impl
	rule__CitModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getGroup_4()); }
(rule__CitModel__Group_4__0)?
{ after(grammarAccess.getCitModelAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group__5__Impl
	rule__CitModel__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getParametersKeyword_5()); }

	'Parameters:' 

{ after(grammarAccess.getCitModelAccess().getParametersKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group__6__Impl
	rule__CitModel__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCitModelAccess().getParametersAssignment_6()); }
(rule__CitModel__ParametersAssignment_6)
{ after(grammarAccess.getCitModelAccess().getParametersAssignment_6()); }
)
(
{ before(grammarAccess.getCitModelAccess().getParametersAssignment_6()); }
(rule__CitModel__ParametersAssignment_6)*
{ after(grammarAccess.getCitModelAccess().getParametersAssignment_6()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group__7__Impl
	rule__CitModel__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getEndKeyword_7()); }

	'end' 

{ after(grammarAccess.getCitModelAccess().getEndKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group__8__Impl
	rule__CitModel__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getGroup_8()); }
(rule__CitModel__Group_8__0)?
{ after(grammarAccess.getCitModelAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group__9__Impl
	rule__CitModel__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getGroup_9()); }
(rule__CitModel__Group_9__0)?
{ after(grammarAccess.getCitModelAccess().getGroup_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getGroup_10()); }
(rule__CitModel__Group_10__0)?
{ after(grammarAccess.getCitModelAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__CitModel__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_3__0__Impl
	rule__CitModel__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getDefinitionsKeyword_3_0()); }

	'Definitions:' 

{ after(grammarAccess.getCitModelAccess().getDefinitionsKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_3__1__Impl
	rule__CitModel__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCitModelAccess().getDefinitionsAssignment_3_1()); }
(rule__CitModel__DefinitionsAssignment_3_1)
{ after(grammarAccess.getCitModelAccess().getDefinitionsAssignment_3_1()); }
)
(
{ before(grammarAccess.getCitModelAccess().getDefinitionsAssignment_3_1()); }
(rule__CitModel__DefinitionsAssignment_3_1)*
{ after(grammarAccess.getCitModelAccess().getDefinitionsAssignment_3_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getEndKeyword_3_2()); }

	'end' 

{ after(grammarAccess.getCitModelAccess().getEndKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CitModel__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_4__0__Impl
	rule__CitModel__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getTypesKeyword_4_0()); }

	'Types:' 

{ after(grammarAccess.getCitModelAccess().getTypesKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_4__1__Impl
	rule__CitModel__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCitModelAccess().getTypesAssignment_4_1()); }
(rule__CitModel__TypesAssignment_4_1)
{ after(grammarAccess.getCitModelAccess().getTypesAssignment_4_1()); }
)
(
{ before(grammarAccess.getCitModelAccess().getTypesAssignment_4_1()); }
(rule__CitModel__TypesAssignment_4_1)*
{ after(grammarAccess.getCitModelAccess().getTypesAssignment_4_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getEndKeyword_4_2()); }

	'end' 

{ after(grammarAccess.getCitModelAccess().getEndKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CitModel__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_8__0__Impl
	rule__CitModel__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getConstraintsKeyword_8_0()); }

	'Constraints:' 

{ after(grammarAccess.getCitModelAccess().getConstraintsKeyword_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_8__1__Impl
	rule__CitModel__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCitModelAccess().getConstraintsAssignment_8_1()); }
(rule__CitModel__ConstraintsAssignment_8_1)
{ after(grammarAccess.getCitModelAccess().getConstraintsAssignment_8_1()); }
)
(
{ before(grammarAccess.getCitModelAccess().getConstraintsAssignment_8_1()); }
(rule__CitModel__ConstraintsAssignment_8_1)*
{ after(grammarAccess.getCitModelAccess().getConstraintsAssignment_8_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group_8__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_8__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_8__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getEndKeyword_8_2()); }

	'end' 

{ after(grammarAccess.getCitModelAccess().getEndKeyword_8_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CitModel__Group_9__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_9__0__Impl
	rule__CitModel__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_9__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getSeedsKeyword_9_0()); }

	'Seeds:' 

{ after(grammarAccess.getCitModelAccess().getSeedsKeyword_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group_9__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_9__1__Impl
	rule__CitModel__Group_9__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_9__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCitModelAccess().getSeedsAssignment_9_1()); }
(rule__CitModel__SeedsAssignment_9_1)
{ after(grammarAccess.getCitModelAccess().getSeedsAssignment_9_1()); }
)
(
{ before(grammarAccess.getCitModelAccess().getSeedsAssignment_9_1()); }
(rule__CitModel__SeedsAssignment_9_1)*
{ after(grammarAccess.getCitModelAccess().getSeedsAssignment_9_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group_9__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_9__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_9__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getEndKeyword_9_2()); }

	'end' 

{ after(grammarAccess.getCitModelAccess().getEndKeyword_9_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CitModel__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_10__0__Impl
	rule__CitModel__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getTestGoalsKeyword_10_0()); }

	'TestGoals:' 

{ after(grammarAccess.getCitModelAccess().getTestGoalsKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_10__1__Impl
	rule__CitModel__Group_10__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCitModelAccess().getTestGoalsAssignment_10_1()); }
(rule__CitModel__TestGoalsAssignment_10_1)
{ after(grammarAccess.getCitModelAccess().getTestGoalsAssignment_10_1()); }
)
(
{ before(grammarAccess.getCitModelAccess().getTestGoalsAssignment_10_1()); }
(rule__CitModel__TestGoalsAssignment_10_1)*
{ after(grammarAccess.getCitModelAccess().getTestGoalsAssignment_10_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group_10__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CitModel__Group_10__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_10__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getEndKeyword_10_2()); }

	'end' 

{ after(grammarAccess.getCitModelAccess().getEndKeyword_10_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ConstantNumber__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantNumber__Group__0__Impl
	rule__ConstantNumber__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantNumber__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantNumberAccess().getNumberKeyword_0()); }

	'Number' 

{ after(grammarAccess.getConstantNumberAccess().getNumberKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantNumber__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantNumber__Group__1__Impl
	rule__ConstantNumber__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantNumber__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantNumberAccess().getNameAssignment_1()); }
(rule__ConstantNumber__NameAssignment_1)
{ after(grammarAccess.getConstantNumberAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantNumber__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantNumber__Group__2__Impl
	rule__ConstantNumber__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantNumber__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantNumberAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getConstantNumberAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantNumber__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantNumber__Group__3__Impl
	rule__ConstantNumber__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantNumber__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantNumberAccess().getValueAssignment_3()); }
(rule__ConstantNumber__ValueAssignment_3)
{ after(grammarAccess.getConstantNumberAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantNumber__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantNumber__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantNumber__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantNumberAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getConstantNumberAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NamedType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedType__Group__0__Impl
	rule__NamedType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeAccess().getEnumerativeTypeKeyword_0()); }

	'EnumerativeType' 

{ after(grammarAccess.getNamedTypeAccess().getEnumerativeTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedType__Group__1__Impl
	rule__NamedType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeAccess().getNameAssignment_1()); }
(rule__NamedType__NameAssignment_1)
{ after(grammarAccess.getNamedTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedType__Group__2__Impl
	rule__NamedType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getNamedTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedType__Group__3__Impl
	rule__NamedType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeAccess().getElementsAssignment_3()); }
(rule__NamedType__ElementsAssignment_3)*
{ after(grammarAccess.getNamedTypeAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedType__Group__4__Impl
	rule__NamedType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getNamedTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedType__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedType__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedType__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getNamedTypeAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Enumerative__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerative__Group__0__Impl
	rule__Enumerative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getEnumerativeKeyword_0()); }

	'Enumerative' 

{ after(grammarAccess.getEnumerativeAccess().getEnumerativeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerative__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerative__Group__1__Impl
	rule__Enumerative__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getNameAssignment_1()); }
(rule__Enumerative__NameAssignment_1)
{ after(grammarAccess.getEnumerativeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerative__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerative__Group__2__Impl
	rule__Enumerative__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getAlternatives_2()); }
(rule__Enumerative__Alternatives_2)
{ after(grammarAccess.getEnumerativeAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerative__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerative__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getEnumerativeAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Enumerative__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerative__Group_2_0__0__Impl
	rule__Enumerative__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getColonKeyword_2_0_0()); }

	':' 

{ after(grammarAccess.getEnumerativeAccess().getColonKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerative__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerative__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getNamedTypeAssignment_2_0_1()); }
(rule__Enumerative__NamedTypeAssignment_2_0_1)
{ after(grammarAccess.getEnumerativeAccess().getNamedTypeAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Enumerative__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerative__Group_2_1__0__Impl
	rule__Enumerative__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getLeftCurlyBracketKeyword_2_1_0()); }

	'{' 

{ after(grammarAccess.getEnumerativeAccess().getLeftCurlyBracketKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerative__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerative__Group_2_1__1__Impl
	rule__Enumerative__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getAtypeAssignment_2_1_1()); }
(rule__Enumerative__AtypeAssignment_2_1_1)
{ after(grammarAccess.getEnumerativeAccess().getAtypeAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerative__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerative__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getRightCurlyBracketKeyword_2_1_2()); }

	'}' 

{ after(grammarAccess.getEnumerativeAccess().getRightCurlyBracketKeyword_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Boolean__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Boolean__Group__0__Impl
	rule__Boolean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAccess().getBooleanKeyword_0()); }

	'Boolean' 

{ after(grammarAccess.getBooleanAccess().getBooleanKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Boolean__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Boolean__Group__1__Impl
	rule__Boolean__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAccess().getNameAssignment_1()); }
(rule__Boolean__NameAssignment_1)
{ after(grammarAccess.getBooleanAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Boolean__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Boolean__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getBooleanAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Numbers__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numbers__Group__0__Impl
	rule__Numbers__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumbersAccess().getNumbersKeyword_0()); }

	'Numbers' 

{ after(grammarAccess.getNumbersAccess().getNumbersKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numbers__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numbers__Group__1__Impl
	rule__Numbers__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumbersAccess().getNameAssignment_1()); }
(rule__Numbers__NameAssignment_1)
{ after(grammarAccess.getNumbersAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numbers__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numbers__Group__2__Impl
	rule__Numbers__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumbersAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getNumbersAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numbers__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numbers__Group__3__Impl
	rule__Numbers__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getNumbersAccess().getValuesAssignment_3()); }
(rule__Numbers__ValuesAssignment_3)
{ after(grammarAccess.getNumbersAccess().getValuesAssignment_3()); }
)
(
{ before(grammarAccess.getNumbersAccess().getValuesAssignment_3()); }
(rule__Numbers__ValuesAssignment_3)*
{ after(grammarAccess.getNumbersAccess().getValuesAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numbers__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numbers__Group__4__Impl
	rule__Numbers__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumbersAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getNumbersAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numbers__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numbers__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumbersAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getNumbersAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Range__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__0__Impl
	rule__Range__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getRangeKeyword_0()); }

	'Range' 

{ after(grammarAccess.getRangeAccess().getRangeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__1__Impl
	rule__Range__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getNameAssignment_1()); }
(rule__Range__NameAssignment_1)
{ after(grammarAccess.getRangeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__2__Impl
	rule__Range__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getRangeAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__3__Impl
	rule__Range__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getBeginAssignment_3()); }
(rule__Range__BeginAssignment_3)
{ after(grammarAccess.getRangeAccess().getBeginAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__4__Impl
	rule__Range__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getFullStopFullStopKeyword_4()); }

	'..' 

{ after(grammarAccess.getRangeAccess().getFullStopFullStopKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__5__Impl
	rule__Range__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getEndAssignment_5()); }
(rule__Range__EndAssignment_5)
{ after(grammarAccess.getRangeAccess().getEndAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__6__Impl
	rule__Range__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getRightSquareBracketKeyword_6()); }

	']' 

{ after(grammarAccess.getRangeAccess().getRightSquareBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__7__Impl
	rule__Range__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getGroup_7()); }
(rule__Range__Group_7__0)?
{ after(grammarAccess.getRangeAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getSemicolonKeyword_8()); }

	';' 

{ after(grammarAccess.getRangeAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Range__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group_7__0__Impl
	rule__Range__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getStepKeyword_7_0()); }

	'step' 

{ after(grammarAccess.getRangeAccess().getStepKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getStepAssignment_7_1()); }
(rule__Range__StepAssignment_7_1)
{ after(grammarAccess.getRangeAccess().getStepAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNumberSignKeyword_0()); }

	'#' 

{ after(grammarAccess.getRuleAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getOrExpressionParserRuleCall_1()); }
	ruleOrExpression
{ after(grammarAccess.getRuleAccess().getOrExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNumberSignKeyword_2()); }

	'#' 

{ after(grammarAccess.getRuleAccess().getNumberSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
(rule__OrExpression__Group_1_0__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__OrExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_0__0__Impl
	rule__OrExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_0__1__Impl
	rule__OrExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOpAssignment_1_0_1()); }
(rule__OrExpression__OpAssignment_1_0_1)
{ after(grammarAccess.getOrExpressionAccess().getOpAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_0_2()); }
(rule__OrExpression__RightAssignment_1_0_2)
{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
	ruleImpliesExpression
{ after(grammarAccess.getAndExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
(rule__AndExpression__Group_1_0__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AndExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0__0__Impl
	rule__AndExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0__1__Impl
	rule__AndExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpAssignment_1_0_1()); }
(rule__AndExpression__OpAssignment_1_0_1)
{ after(grammarAccess.getAndExpressionAccess().getOpAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_0_2()); }
(rule__AndExpression__RightAssignment_1_0_2)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ImpliesExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group__0__Impl
	rule__ImpliesExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getImpliesExpressionAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
(rule__ImpliesExpression__Group_1__0)*
{ after(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImpliesExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__0__Impl
	rule__ImpliesExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__1__Impl
	rule__ImpliesExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getOpAssignment_1_1()); }
(rule__ImpliesExpression__OpAssignment_1_1)
{ after(grammarAccess.getImpliesExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2()); }
(rule__ImpliesExpression__RightAssignment_1_2)
{ after(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getOrExpressionParserRuleCall_1_1()); }
	ruleOrExpression
{ after(grammarAccess.getPrimaryAccess().getOrExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__0__Impl
	rule__NotExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getAlternatives_0()); }
(rule__NotExpression__Alternatives_0)
{ after(grammarAccess.getNotExpressionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__1__Impl
	rule__NotExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getPrimaryParserRuleCall_1()); }
	rulePrimary
{ after(grammarAccess.getNotExpressionAccess().getPrimaryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getNotExpressionPredicateAction_2()); }
(

)
{ after(grammarAccess.getNotExpressionAccess().getNotExpressionPredicateAction_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BoolAssign__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolAssign__Group__0__Impl
	rule__BoolAssign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssign__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignAccess().getLeftAssignment_0()); }
(rule__BoolAssign__LeftAssignment_0)
{ after(grammarAccess.getBoolAssignAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolAssign__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolAssign__Group__1__Impl
	rule__BoolAssign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssign__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignAccess().getOpAssignment_1()); }
(rule__BoolAssign__OpAssignment_1)
{ after(grammarAccess.getBoolAssignAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolAssign__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolAssign__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssign__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignAccess().getRightAssignment_2()); }
(rule__BoolAssign__RightAssignment_2)
{ after(grammarAccess.getBoolAssignAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EnumAssign__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumAssign__Group__0__Impl
	rule__EnumAssign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAssign__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAssignAccess().getLeftAssignment_0()); }
(rule__EnumAssign__LeftAssignment_0)
{ after(grammarAccess.getEnumAssignAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumAssign__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumAssign__Group__1__Impl
	rule__EnumAssign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAssign__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAssignAccess().getOpAssignment_1()); }
(rule__EnumAssign__OpAssignment_1)
{ after(grammarAccess.getEnumAssignAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumAssign__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumAssign__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAssign__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAssignAccess().getRightAssignment_2()); }
(rule__EnumAssign__RightAssignment_2)
{ after(grammarAccess.getEnumAssignAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_0()); }
(rule__RelationalExpression__Group_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__RelationalExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_0__0__Impl
	rule__RelationalExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLeftAssignment_0_0()); }
(rule__RelationalExpression__LeftAssignment_0_0)
{ after(grammarAccess.getRelationalExpressionAccess().getLeftAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_0__1__Impl
	rule__RelationalExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_0_1()); }
(rule__RelationalExpression__OpAssignment_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_0_2()); }
(rule__RelationalExpression__RightAssignment_0_2)
{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PlusMinus__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusMinus__Group__0__Impl
	rule__PlusMinus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusAccess().getModMultDivParserRuleCall_0()); }
	ruleModMultDiv
{ after(grammarAccess.getPlusMinusAccess().getModMultDivParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusMinus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusAccess().getGroup_1()); }
(rule__PlusMinus__Group_1__0)*
{ after(grammarAccess.getPlusMinusAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PlusMinus__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusMinus__Group_1__0__Impl
	rule__PlusMinus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusAccess().getPlusMinusLeftAction_1_0()); }
(

)
{ after(grammarAccess.getPlusMinusAccess().getPlusMinusLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusMinus__Group_1__1__Impl
	rule__PlusMinus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusAccess().getOpAssignment_1_1()); }
(rule__PlusMinus__OpAssignment_1_1)
{ after(grammarAccess.getPlusMinusAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusMinus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusAccess().getRightAssignment_1_2()); }
(rule__PlusMinus__RightAssignment_1_2)
{ after(grammarAccess.getPlusMinusAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ModMultDiv__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModMultDiv__Group__0__Impl
	rule__ModMultDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModMultDivAccess().getNumericParserRuleCall_0()); }
	ruleNumeric
{ after(grammarAccess.getModMultDivAccess().getNumericParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModMultDiv__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModMultDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModMultDivAccess().getGroup_1()); }
(rule__ModMultDiv__Group_1__0)*
{ after(grammarAccess.getModMultDivAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModMultDiv__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModMultDiv__Group_1__0__Impl
	rule__ModMultDiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModMultDivAccess().getModMultDivLeftAction_1_0()); }
(

)
{ after(grammarAccess.getModMultDivAccess().getModMultDivLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModMultDiv__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModMultDiv__Group_1__1__Impl
	rule__ModMultDiv__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModMultDivAccess().getOpAssignment_1_1()); }
(rule__ModMultDiv__OpAssignment_1_1)
{ after(grammarAccess.getModMultDivAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModMultDiv__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModMultDiv__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModMultDivAccess().getRightAssignment_1_2()); }
(rule__ModMultDiv__RightAssignment_1_2)
{ after(grammarAccess.getModMultDivAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Numeric__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric__Group_1__0__Impl
	rule__Numeric__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getNumericAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numeric__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric__Group_1__1__Impl
	rule__Numeric__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericAccess().getPlusMinusParserRuleCall_1_1()); }
	rulePlusMinus
{ after(grammarAccess.getNumericAccess().getPlusMinusParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numeric__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getNumericAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Seed__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Seed__Group__0__Impl
	rule__Seed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Seed__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeedAccess().getNumberSignKeyword_0()); }

	'#' 

{ after(grammarAccess.getSeedAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Seed__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Seed__Group__1__Impl
	rule__Seed__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Seed__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeedAccess().getAssigmentSeedListAssignment_1()); }
(rule__Seed__AssigmentSeedListAssignment_1)
{ after(grammarAccess.getSeedAccess().getAssigmentSeedListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Seed__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Seed__Group__2__Impl
	rule__Seed__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Seed__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeedAccess().getGroup_2()); }
(rule__Seed__Group_2__0)*
{ after(grammarAccess.getSeedAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Seed__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Seed__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Seed__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeedAccess().getNumberSignKeyword_3()); }

	'#' 

{ after(grammarAccess.getSeedAccess().getNumberSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Seed__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Seed__Group_2__0__Impl
	rule__Seed__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Seed__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeedAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getSeedAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Seed__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Seed__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Seed__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeedAccess().getAssigmentSeedListAssignment_2_1()); }
(rule__Seed__AssigmentSeedListAssignment_2_1)
{ after(grammarAccess.getSeedAccess().getAssigmentSeedListAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumSeed__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSeed__Group__0__Impl
	rule__EnumSeed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSeed__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSeedAccess().getLeftAssignment_0()); }
(rule__EnumSeed__LeftAssignment_0)
{ after(grammarAccess.getEnumSeedAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSeed__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSeed__Group__1__Impl
	rule__EnumSeed__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSeed__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSeedAccess().getOpAssignment_1()); }
(rule__EnumSeed__OpAssignment_1)
{ after(grammarAccess.getEnumSeedAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSeed__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSeed__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSeed__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSeedAccess().getRightAssignment_2()); }
(rule__EnumSeed__RightAssignment_2)
{ after(grammarAccess.getEnumSeedAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumericalSeed__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalSeed__Group__0__Impl
	rule__NumericalSeed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalSeed__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalSeedAccess().getLeftAssignment_0()); }
(rule__NumericalSeed__LeftAssignment_0)
{ after(grammarAccess.getNumericalSeedAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalSeed__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalSeed__Group__1__Impl
	rule__NumericalSeed__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalSeed__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalSeedAccess().getOpAssignment_1()); }
(rule__NumericalSeed__OpAssignment_1)
{ after(grammarAccess.getNumericalSeedAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalSeed__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalSeed__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalSeed__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalSeedAccess().getRightAssignment_2()); }
(rule__NumericalSeed__RightAssignment_2)
{ after(grammarAccess.getNumericalSeedAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BoolAssignSeed__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolAssignSeed__Group__0__Impl
	rule__BoolAssignSeed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssignSeed__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignSeedAccess().getLeftAssignment_0()); }
(rule__BoolAssignSeed__LeftAssignment_0)
{ after(grammarAccess.getBoolAssignSeedAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolAssignSeed__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolAssignSeed__Group__1__Impl
	rule__BoolAssignSeed__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssignSeed__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignSeedAccess().getOpAssignment_1()); }
(rule__BoolAssignSeed__OpAssignment_1)
{ after(grammarAccess.getBoolAssignSeedAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolAssignSeed__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolAssignSeed__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssignSeed__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignSeedAccess().getRightAssignment_2()); }
(rule__BoolAssignSeed__RightAssignment_2)
{ after(grammarAccess.getBoolAssignSeedAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__1__Impl
	rule__FQN__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getElementIDParserRuleCall_2()); }
	ruleelementID
{ after(grammarAccess.getFQNAccess().getElementIDParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PossiblySignedNumber__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PossiblySignedNumber__Group__0__Impl
	rule__PossiblySignedNumber__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PossiblySignedNumber__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPossiblySignedNumberAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getPossiblySignedNumberAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PossiblySignedNumber__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PossiblySignedNumber__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PossiblySignedNumber__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPossiblySignedNumberAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getPossiblySignedNumberAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__CitModel__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getCitModelAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__DefinitionsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getDefinitionsConstantParserRuleCall_3_1_0()); }
	ruleConstant{ after(grammarAccess.getCitModelAccess().getDefinitionsConstantParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__TypesAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getTypesNamedTypeParserRuleCall_4_1_0()); }
	ruleNamedType{ after(grammarAccess.getCitModelAccess().getTypesNamedTypeParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__ParametersAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getParametersParameterParserRuleCall_6_0()); }
	ruleParameter{ after(grammarAccess.getCitModelAccess().getParametersParameterParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__ConstraintsAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getConstraintsRuleParserRuleCall_8_1_0()); }
	ruleRule{ after(grammarAccess.getCitModelAccess().getConstraintsRuleParserRuleCall_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__SeedsAssignment_9_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getSeedsSeedParserRuleCall_9_1_0()); }
	ruleSeed{ after(grammarAccess.getCitModelAccess().getSeedsSeedParserRuleCall_9_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__TestGoalsAssignment_10_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCitModelAccess().getTestGoalsRuleParserRuleCall_10_1_0()); }
	ruleRule{ after(grammarAccess.getCitModelAccess().getTestGoalsRuleParserRuleCall_10_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantNumber__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantNumberAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConstantNumberAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantNumber__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantNumberAccess().getValueINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getConstantNumberAccess().getValueINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNamedTypeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedType__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeAccess().getElementsElementParserRuleCall_3_0()); }
	ruleElement{ after(grammarAccess.getNamedTypeAccess().getElementsElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousType__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnonymousTypeAccess().getElementsElementParserRuleCall_0()); }
	ruleElement{ after(grammarAccess.getAnonymousTypeAccess().getElementsElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumerativeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__NamedTypeAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getNamedTypeNamedTypeCrossReference_2_0_1_0()); }
(
{ before(grammarAccess.getEnumerativeAccess().getNamedTypeNamedTypeIDTerminalRuleCall_2_0_1_0_1()); }
	RULE_ID{ after(grammarAccess.getEnumerativeAccess().getNamedTypeNamedTypeIDTerminalRuleCall_2_0_1_0_1()); }
)
{ after(grammarAccess.getEnumerativeAccess().getNamedTypeNamedTypeCrossReference_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__AtypeAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerativeAccess().getAtypeAnonymousTypeParserRuleCall_2_1_1_0()); }
	ruleAnonymousType{ after(grammarAccess.getEnumerativeAccess().getAtypeAnonymousTypeParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getNameElementIDParserRuleCall_0()); }
	ruleelementID{ after(grammarAccess.getElementAccess().getNameElementIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBooleanAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumbersAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNumbersAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__ValuesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumbersAccess().getValuesPossiblySignedNumberParserRuleCall_3_0()); }
	rulePossiblySignedNumber{ after(grammarAccess.getNumbersAccess().getValuesPossiblySignedNumberParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRangeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__BeginAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getBeginPossiblySignedNumberParserRuleCall_3_0()); }
	rulePossiblySignedNumber{ after(grammarAccess.getRangeAccess().getBeginPossiblySignedNumberParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__EndAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getEndPossiblySignedNumberParserRuleCall_5_0()); }
	rulePossiblySignedNumber{ after(grammarAccess.getRangeAccess().getEndPossiblySignedNumberParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__StepAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getStepINTTerminalRuleCall_7_1_0()); }
	RULE_INT{ after(grammarAccess.getRangeAccess().getStepINTTerminalRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OpAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOpOrOperatorsEnumRuleCall_1_0_1_0()); }
	ruleOrOperators{ after(grammarAccess.getOrExpressionAccess().getOpOrOperatorsEnumRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_0_2_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpAndOperatorsEnumRuleCall_1_0_1_0()); }
	ruleAndOperators{ after(grammarAccess.getAndExpressionAccess().getOpAndOperatorsEnumRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightImpliesExpressionParserRuleCall_1_0_2_0()); }
	ruleImpliesExpression{ after(grammarAccess.getAndExpressionAccess().getRightImpliesExpressionParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getOpImpliesOperatorEnumRuleCall_1_1_0()); }
	ruleImpliesOperator{ after(grammarAccess.getImpliesExpressionAccess().getOpImpliesOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getImpliesExpressionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssign__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignAccess().getLeftBooleanCrossReference_0_0()); }
(
{ before(grammarAccess.getBoolAssignAccess().getLeftBooleanIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getBoolAssignAccess().getLeftBooleanIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getBoolAssignAccess().getLeftBooleanCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssign__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignAccess().getOpAssignmentOperatorsEnumRuleCall_1_0()); }
	ruleAssignmentOperators{ after(grammarAccess.getBoolAssignAccess().getOpAssignmentOperatorsEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssign__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignAccess().getRightBooleanConstEnumRuleCall_2_0()); }
	ruleBooleanConst{ after(grammarAccess.getBoolAssignAccess().getRightBooleanConstEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAssign__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAssignAccess().getLeftEnumerativeCrossReference_0_0()); }
(
{ before(grammarAccess.getEnumAssignAccess().getLeftEnumerativeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getEnumAssignAccess().getLeftEnumerativeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getEnumAssignAccess().getLeftEnumerativeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAssign__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAssignAccess().getOpAssignmentOperatorsEnumRuleCall_1_0()); }
	ruleAssignmentOperators{ after(grammarAccess.getEnumAssignAccess().getOpAssignmentOperatorsEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAssign__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAssignAccess().getRightElementCrossReference_2_0()); }
(
{ before(grammarAccess.getEnumAssignAccess().getRightElementFQNParserRuleCall_2_0_1()); }
	ruleFQN{ after(grammarAccess.getEnumAssignAccess().getRightElementFQNParserRuleCall_2_0_1()); }
)
{ after(grammarAccess.getEnumAssignAccess().getRightElementCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__LeftAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLeftNumericalCrossReference_0_0_0()); }
(
{ before(grammarAccess.getRelationalExpressionAccess().getLeftNumericalIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getRelationalExpressionAccess().getLeftNumericalIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getRelationalExpressionAccess().getLeftNumericalCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAlternatives_0_1_0()); }
(rule__RelationalExpression__OpAlternatives_0_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAlternatives_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightPlusMinusParserRuleCall_0_2_0()); }
	rulePlusMinus{ after(grammarAccess.getRelationalExpressionAccess().getRightPlusMinusParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusAccess().getOpPlusMinusOperatorsEnumRuleCall_1_1_0()); }
	rulePlusMinusOperators{ after(grammarAccess.getPlusMinusAccess().getOpPlusMinusOperatorsEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusAccess().getRightModMultDivParserRuleCall_1_2_0()); }
	ruleModMultDiv{ after(grammarAccess.getPlusMinusAccess().getRightModMultDivParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModMultDivAccess().getOpModMultDivOperatorsEnumRuleCall_1_1_0()); }
	ruleModMultDivOperators{ after(grammarAccess.getModMultDivAccess().getOpModMultDivOperatorsEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModMultDivAccess().getRightNumericParserRuleCall_1_2_0()); }
	ruleNumeric{ after(grammarAccess.getModMultDivAccess().getRightNumericParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__NumberAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getNumberPossiblySignedNumberParserRuleCall_0_0()); }
	rulePossiblySignedNumber{ after(grammarAccess.getNumberLiteralAccess().getNumberPossiblySignedNumberParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__NumericalAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getNumericalNumericalExCrossReference_1_0()); }
(
{ before(grammarAccess.getNumberLiteralAccess().getNumericalNumericalExIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getNumberLiteralAccess().getNumericalNumericalExIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getNumberLiteralAccess().getNumericalNumericalExCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Seed__AssigmentSeedListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeedAccess().getAssigmentSeedListAseedParserRuleCall_1_0()); }
	ruleAseed{ after(grammarAccess.getSeedAccess().getAssigmentSeedListAseedParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Seed__AssigmentSeedListAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeedAccess().getAssigmentSeedListAseedParserRuleCall_2_1_0()); }
	ruleAseed{ after(grammarAccess.getSeedAccess().getAssigmentSeedListAseedParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SeedNumberLiteral__NumberAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeedNumberLiteralAccess().getNumberPossiblySignedNumberParserRuleCall_0_0()); }
	rulePossiblySignedNumber{ after(grammarAccess.getSeedNumberLiteralAccess().getNumberPossiblySignedNumberParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SeedNumberLiteral__ConstantAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeedNumberLiteralAccess().getConstantConstantNumberCrossReference_1_0()); }
(
{ before(grammarAccess.getSeedNumberLiteralAccess().getConstantConstantNumberIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getSeedNumberLiteralAccess().getConstantConstantNumberIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getSeedNumberLiteralAccess().getConstantConstantNumberCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSeed__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSeedAccess().getLeftEnumerativeCrossReference_0_0()); }
(
{ before(grammarAccess.getEnumSeedAccess().getLeftEnumerativeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getEnumSeedAccess().getLeftEnumerativeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getEnumSeedAccess().getLeftEnumerativeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSeed__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSeedAccess().getOpEqualsSignKeyword_1_0()); }
(
{ before(grammarAccess.getEnumSeedAccess().getOpEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getEnumSeedAccess().getOpEqualsSignKeyword_1_0()); }
)

{ after(grammarAccess.getEnumSeedAccess().getOpEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSeed__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSeedAccess().getRightElementCrossReference_2_0()); }
(
{ before(grammarAccess.getEnumSeedAccess().getRightElementFQNParserRuleCall_2_0_1()); }
	ruleFQN{ after(grammarAccess.getEnumSeedAccess().getRightElementFQNParserRuleCall_2_0_1()); }
)
{ after(grammarAccess.getEnumSeedAccess().getRightElementCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalSeed__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalSeedAccess().getLeftNumericalCrossReference_0_0()); }
(
{ before(grammarAccess.getNumericalSeedAccess().getLeftNumericalIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getNumericalSeedAccess().getLeftNumericalIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getNumericalSeedAccess().getLeftNumericalCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalSeed__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalSeedAccess().getOpEqualsSignKeyword_1_0()); }
(
{ before(grammarAccess.getNumericalSeedAccess().getOpEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getNumericalSeedAccess().getOpEqualsSignKeyword_1_0()); }
)

{ after(grammarAccess.getNumericalSeedAccess().getOpEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalSeed__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalSeedAccess().getRightSeedNumberLiteralParserRuleCall_2_0()); }
	ruleSeedNumberLiteral{ after(grammarAccess.getNumericalSeedAccess().getRightSeedNumberLiteralParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssignSeed__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignSeedAccess().getLeftBooleanCrossReference_0_0()); }
(
{ before(grammarAccess.getBoolAssignSeedAccess().getLeftBooleanIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getBoolAssignSeedAccess().getLeftBooleanIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getBoolAssignSeedAccess().getLeftBooleanCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssignSeed__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignSeedAccess().getOpEqualsSignKeyword_1_0()); }
(
{ before(grammarAccess.getBoolAssignSeedAccess().getOpEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getBoolAssignSeedAccess().getOpEqualsSignKeyword_1_0()); }
)

{ after(grammarAccess.getBoolAssignSeedAccess().getOpEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAssignSeed__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAssignSeedAccess().getRightBooleanConstEnumRuleCall_2_0()); }
	ruleBooleanConst{ after(grammarAccess.getBoolAssignSeedAccess().getRightBooleanConstEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NUMID : (('0'..'9')+ RULE_ID|'"' RULE_INT '"');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


