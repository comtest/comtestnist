/*
* generated by Xtext
*/
package citlab.model.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import citlab.model.services.CitLGrammarAccess;

public class CitLParser extends AbstractContentAssistParser {
	
	@Inject
	private CitLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected citlab.model.ui.contentassist.antlr.internal.InternalCitLParser createParser() {
		citlab.model.ui.contentassist.antlr.internal.InternalCitLParser result = new citlab.model.ui.contentassist.antlr.internal.InternalCitLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getParameterAccess().getAlternatives(), "rule__Parameter__Alternatives");
					put(grammarAccess.getParametersExAccess().getAlternatives(), "rule__ParametersEx__Alternatives");
					put(grammarAccess.getNumericalExAccess().getAlternatives(), "rule__NumericalEx__Alternatives");
					put(grammarAccess.getNumericalAccess().getAlternatives(), "rule__Numerical__Alternatives");
					put(grammarAccess.getEnumerativeTypeAccess().getAlternatives(), "rule__EnumerativeType__Alternatives");
					put(grammarAccess.getEnumerativeAccess().getAlternatives_2(), "rule__Enumerative__Alternatives_2");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getNotExpressionAccess().getAlternatives_0(), "rule__NotExpression__Alternatives_0");
					put(grammarAccess.getAtomicPredicateAccess().getAlternatives(), "rule__AtomicPredicate__Alternatives");
					put(grammarAccess.getRelationalExpressionAccess().getOpAlternatives_0_1_0(), "rule__RelationalExpression__OpAlternatives_0_1_0");
					put(grammarAccess.getNumericAccess().getAlternatives(), "rule__Numeric__Alternatives");
					put(grammarAccess.getNumberLiteralAccess().getAlternatives(), "rule__NumberLiteral__Alternatives");
					put(grammarAccess.getAseedAccess().getAlternatives(), "rule__Aseed__Alternatives");
					put(grammarAccess.getSeedNumberLiteralAccess().getAlternatives(), "rule__SeedNumberLiteral__Alternatives");
					put(grammarAccess.getElementIDAccess().getAlternatives(), "rule__ElementID__Alternatives");
					put(grammarAccess.getRelationalOperatorsAccess().getAlternatives(), "rule__RelationalOperators__Alternatives");
					put(grammarAccess.getAssignmentOperatorsAccess().getAlternatives(), "rule__AssignmentOperators__Alternatives");
					put(grammarAccess.getAndOperatorsAccess().getAlternatives(), "rule__AndOperators__Alternatives");
					put(grammarAccess.getOrOperatorsAccess().getAlternatives(), "rule__OrOperators__Alternatives");
					put(grammarAccess.getPlusMinusOperatorsAccess().getAlternatives(), "rule__PlusMinusOperators__Alternatives");
					put(grammarAccess.getModMultDivOperatorsAccess().getAlternatives(), "rule__ModMultDivOperators__Alternatives");
					put(grammarAccess.getImpliesOperatorAccess().getAlternatives(), "rule__ImpliesOperator__Alternatives");
					put(grammarAccess.getBooleanConstAccess().getAlternatives(), "rule__BooleanConst__Alternatives");
					put(grammarAccess.getCitModelAccess().getGroup(), "rule__CitModel__Group__0");
					put(grammarAccess.getCitModelAccess().getGroup_3(), "rule__CitModel__Group_3__0");
					put(grammarAccess.getCitModelAccess().getGroup_4(), "rule__CitModel__Group_4__0");
					put(grammarAccess.getCitModelAccess().getGroup_8(), "rule__CitModel__Group_8__0");
					put(grammarAccess.getCitModelAccess().getGroup_9(), "rule__CitModel__Group_9__0");
					put(grammarAccess.getCitModelAccess().getGroup_10(), "rule__CitModel__Group_10__0");
					put(grammarAccess.getConstantNumberAccess().getGroup(), "rule__ConstantNumber__Group__0");
					put(grammarAccess.getNamedTypeAccess().getGroup(), "rule__NamedType__Group__0");
					put(grammarAccess.getEnumerativeAccess().getGroup(), "rule__Enumerative__Group__0");
					put(grammarAccess.getEnumerativeAccess().getGroup_2_0(), "rule__Enumerative__Group_2_0__0");
					put(grammarAccess.getEnumerativeAccess().getGroup_2_1(), "rule__Enumerative__Group_2_1__0");
					put(grammarAccess.getBooleanAccess().getGroup(), "rule__Boolean__Group__0");
					put(grammarAccess.getNumbersAccess().getGroup(), "rule__Numbers__Group__0");
					put(grammarAccess.getRangeAccess().getGroup(), "rule__Range__Group__0");
					put(grammarAccess.getRangeAccess().getGroup_7(), "rule__Range__Group_7__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1_0(), "rule__OrExpression__Group_1_0__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1_0(), "rule__AndExpression__Group_1_0__0");
					put(grammarAccess.getImpliesExpressionAccess().getGroup(), "rule__ImpliesExpression__Group__0");
					put(grammarAccess.getImpliesExpressionAccess().getGroup_1(), "rule__ImpliesExpression__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getNotExpressionAccess().getGroup(), "rule__NotExpression__Group__0");
					put(grammarAccess.getBoolAssignAccess().getGroup(), "rule__BoolAssign__Group__0");
					put(grammarAccess.getEnumAssignAccess().getGroup(), "rule__EnumAssign__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_0(), "rule__RelationalExpression__Group_0__0");
					put(grammarAccess.getPlusMinusAccess().getGroup(), "rule__PlusMinus__Group__0");
					put(grammarAccess.getPlusMinusAccess().getGroup_1(), "rule__PlusMinus__Group_1__0");
					put(grammarAccess.getModMultDivAccess().getGroup(), "rule__ModMultDiv__Group__0");
					put(grammarAccess.getModMultDivAccess().getGroup_1(), "rule__ModMultDiv__Group_1__0");
					put(grammarAccess.getNumericAccess().getGroup_1(), "rule__Numeric__Group_1__0");
					put(grammarAccess.getSeedAccess().getGroup(), "rule__Seed__Group__0");
					put(grammarAccess.getSeedAccess().getGroup_2(), "rule__Seed__Group_2__0");
					put(grammarAccess.getEnumSeedAccess().getGroup(), "rule__EnumSeed__Group__0");
					put(grammarAccess.getNumericalSeedAccess().getGroup(), "rule__NumericalSeed__Group__0");
					put(grammarAccess.getBoolAssignSeedAccess().getGroup(), "rule__BoolAssignSeed__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getPossiblySignedNumberAccess().getGroup(), "rule__PossiblySignedNumber__Group__0");
					put(grammarAccess.getCitModelAccess().getNameAssignment_2(), "rule__CitModel__NameAssignment_2");
					put(grammarAccess.getCitModelAccess().getDefinitionsAssignment_3_1(), "rule__CitModel__DefinitionsAssignment_3_1");
					put(grammarAccess.getCitModelAccess().getTypesAssignment_4_1(), "rule__CitModel__TypesAssignment_4_1");
					put(grammarAccess.getCitModelAccess().getParametersAssignment_6(), "rule__CitModel__ParametersAssignment_6");
					put(grammarAccess.getCitModelAccess().getConstraintsAssignment_8_1(), "rule__CitModel__ConstraintsAssignment_8_1");
					put(grammarAccess.getCitModelAccess().getSeedsAssignment_9_1(), "rule__CitModel__SeedsAssignment_9_1");
					put(grammarAccess.getCitModelAccess().getTestGoalsAssignment_10_1(), "rule__CitModel__TestGoalsAssignment_10_1");
					put(grammarAccess.getConstantNumberAccess().getNameAssignment_1(), "rule__ConstantNumber__NameAssignment_1");
					put(grammarAccess.getConstantNumberAccess().getValueAssignment_3(), "rule__ConstantNumber__ValueAssignment_3");
					put(grammarAccess.getNamedTypeAccess().getNameAssignment_1(), "rule__NamedType__NameAssignment_1");
					put(grammarAccess.getNamedTypeAccess().getElementsAssignment_3(), "rule__NamedType__ElementsAssignment_3");
					put(grammarAccess.getAnonymousTypeAccess().getElementsAssignment(), "rule__AnonymousType__ElementsAssignment");
					put(grammarAccess.getEnumerativeAccess().getNameAssignment_1(), "rule__Enumerative__NameAssignment_1");
					put(grammarAccess.getEnumerativeAccess().getNamedTypeAssignment_2_0_1(), "rule__Enumerative__NamedTypeAssignment_2_0_1");
					put(grammarAccess.getEnumerativeAccess().getAtypeAssignment_2_1_1(), "rule__Enumerative__AtypeAssignment_2_1_1");
					put(grammarAccess.getElementAccess().getNameAssignment(), "rule__Element__NameAssignment");
					put(grammarAccess.getBooleanAccess().getNameAssignment_1(), "rule__Boolean__NameAssignment_1");
					put(grammarAccess.getNumbersAccess().getNameAssignment_1(), "rule__Numbers__NameAssignment_1");
					put(grammarAccess.getNumbersAccess().getValuesAssignment_3(), "rule__Numbers__ValuesAssignment_3");
					put(grammarAccess.getRangeAccess().getNameAssignment_1(), "rule__Range__NameAssignment_1");
					put(grammarAccess.getRangeAccess().getBeginAssignment_3(), "rule__Range__BeginAssignment_3");
					put(grammarAccess.getRangeAccess().getEndAssignment_5(), "rule__Range__EndAssignment_5");
					put(grammarAccess.getRangeAccess().getStepAssignment_7_1(), "rule__Range__StepAssignment_7_1");
					put(grammarAccess.getOrExpressionAccess().getOpAssignment_1_0_1(), "rule__OrExpression__OpAssignment_1_0_1");
					put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_0_2(), "rule__OrExpression__RightAssignment_1_0_2");
					put(grammarAccess.getAndExpressionAccess().getOpAssignment_1_0_1(), "rule__AndExpression__OpAssignment_1_0_1");
					put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_0_2(), "rule__AndExpression__RightAssignment_1_0_2");
					put(grammarAccess.getImpliesExpressionAccess().getOpAssignment_1_1(), "rule__ImpliesExpression__OpAssignment_1_1");
					put(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2(), "rule__ImpliesExpression__RightAssignment_1_2");
					put(grammarAccess.getBoolAssignAccess().getLeftAssignment_0(), "rule__BoolAssign__LeftAssignment_0");
					put(grammarAccess.getBoolAssignAccess().getOpAssignment_1(), "rule__BoolAssign__OpAssignment_1");
					put(grammarAccess.getBoolAssignAccess().getRightAssignment_2(), "rule__BoolAssign__RightAssignment_2");
					put(grammarAccess.getEnumAssignAccess().getLeftAssignment_0(), "rule__EnumAssign__LeftAssignment_0");
					put(grammarAccess.getEnumAssignAccess().getOpAssignment_1(), "rule__EnumAssign__OpAssignment_1");
					put(grammarAccess.getEnumAssignAccess().getRightAssignment_2(), "rule__EnumAssign__RightAssignment_2");
					put(grammarAccess.getRelationalExpressionAccess().getLeftAssignment_0_0(), "rule__RelationalExpression__LeftAssignment_0_0");
					put(grammarAccess.getRelationalExpressionAccess().getOpAssignment_0_1(), "rule__RelationalExpression__OpAssignment_0_1");
					put(grammarAccess.getRelationalExpressionAccess().getRightAssignment_0_2(), "rule__RelationalExpression__RightAssignment_0_2");
					put(grammarAccess.getPlusMinusAccess().getOpAssignment_1_1(), "rule__PlusMinus__OpAssignment_1_1");
					put(grammarAccess.getPlusMinusAccess().getRightAssignment_1_2(), "rule__PlusMinus__RightAssignment_1_2");
					put(grammarAccess.getModMultDivAccess().getOpAssignment_1_1(), "rule__ModMultDiv__OpAssignment_1_1");
					put(grammarAccess.getModMultDivAccess().getRightAssignment_1_2(), "rule__ModMultDiv__RightAssignment_1_2");
					put(grammarAccess.getNumberLiteralAccess().getNumberAssignment_0(), "rule__NumberLiteral__NumberAssignment_0");
					put(grammarAccess.getNumberLiteralAccess().getNumericalAssignment_1(), "rule__NumberLiteral__NumericalAssignment_1");
					put(grammarAccess.getSeedAccess().getAssigmentSeedListAssignment_1(), "rule__Seed__AssigmentSeedListAssignment_1");
					put(grammarAccess.getSeedAccess().getAssigmentSeedListAssignment_2_1(), "rule__Seed__AssigmentSeedListAssignment_2_1");
					put(grammarAccess.getSeedNumberLiteralAccess().getNumberAssignment_0(), "rule__SeedNumberLiteral__NumberAssignment_0");
					put(grammarAccess.getSeedNumberLiteralAccess().getConstantAssignment_1(), "rule__SeedNumberLiteral__ConstantAssignment_1");
					put(grammarAccess.getEnumSeedAccess().getLeftAssignment_0(), "rule__EnumSeed__LeftAssignment_0");
					put(grammarAccess.getEnumSeedAccess().getOpAssignment_1(), "rule__EnumSeed__OpAssignment_1");
					put(grammarAccess.getEnumSeedAccess().getRightAssignment_2(), "rule__EnumSeed__RightAssignment_2");
					put(grammarAccess.getNumericalSeedAccess().getLeftAssignment_0(), "rule__NumericalSeed__LeftAssignment_0");
					put(grammarAccess.getNumericalSeedAccess().getOpAssignment_1(), "rule__NumericalSeed__OpAssignment_1");
					put(grammarAccess.getNumericalSeedAccess().getRightAssignment_2(), "rule__NumericalSeed__RightAssignment_2");
					put(grammarAccess.getBoolAssignSeedAccess().getLeftAssignment_0(), "rule__BoolAssignSeed__LeftAssignment_0");
					put(grammarAccess.getBoolAssignSeedAccess().getOpAssignment_1(), "rule__BoolAssignSeed__OpAssignment_1");
					put(grammarAccess.getBoolAssignSeedAccess().getRightAssignment_2(), "rule__BoolAssignSeed__RightAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			citlab.model.ui.contentassist.antlr.internal.InternalCitLParser typedParser = (citlab.model.ui.contentassist.antlr.internal.InternalCitLParser) parser;
			typedParser.entryRuleCitModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CitLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CitLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
